/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package uk.ac.ucl.chime.gui;



import java.awt.Component;
import java.awt.Dialog;
import java.awt.FileDialog;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.io.File;
import java.sql.Savepoint;
import java.util.ArrayList;
import java.util.Set;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.FileChooserUI;

import org.openehr.am.archetype.Archetype;
import org.openehr.rm.datastructure.itemstructure.representation.Cluster;
import org.openehr.rm.datastructure.itemstructure.representation.Element;


import uk.ac.ucl.chime.db.ClusterContainer;
import uk.ac.ucl.chime.main.MainOne;
//import uk.ac.ucl.chime.utilities.ArchetypeLoader;
import uk.ac.ucl.chime.wrappers.ElementWrapper;
import uk.ac.ucl.chime.wrappers.GuiComposer;
import uk.ac.ucl.chime.wrappers.TempElementStore;
import uk.ac.ucl.chime.wrappers.archetypewrappers.ClusterArchetypeWrapper;


/**
 *
 * @author  __USER__
 */
public class MainForm extends javax.swing.JFrame {

//	private int _lastRowIndex = 0;
//	private int _lastColumnIndex = 0;
//	private boolean _panelLayoutChanged = false;
//	private ClusterArchetypeWrapper _archetypeWrapper;
//	private GuiComposer _composer;
//
//	/** Creates new form MainForm */
//	public MainForm() {
//		initComponents();
//		fillArchetypeList();
//		lbArchetypes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//		attachLBListener();
//	}
//
//	private void attachLBListener() {
//		lbArchetypes.getSelectionModel().addListSelectionListener(
//				new ListBoxModelListener());
//	}
//
//	class ListBoxModelListener implements ListSelectionListener {
//
//		public void valueChanged(ListSelectionEvent e) {
//			try {
//				if (e.getValueIsAdjusting()) {
//					loadSelectedArchetype();
//				}
//			} catch (Exception ex) {				
//			}
//		}
//	}
//
//	private void fillArchetypeList() {
//		File dir = new File("/media/external/work/otherfiles/archetypes");
//		String[] files = dir.list();
//		DefaultListModel lmodel = new DefaultListModel();
//		for (String filename : files) {
//			if (filename.endsWith(".adl"))
//				lmodel.addElement(filename);
//		}
//		lbArchetypes.setModel(lmodel);
//	}
//
//	/** This method is called from within the constructor to
//	 * initialize the form.
//	 * WARNING: Do NOT modify this code. The content of this method is
//	 * always regenerated by the Form Editor.
//	 */
//	//GEN-BEGIN:initComponents
//	// <editor-fold defaultstate="collapsed" desc="Generated Code">
//	private void initComponents() {
//
//		jScrollPane1 = new javax.swing.JScrollPane();
//		pnlMain = new javax.swing.JPanel();
//		jButton1 = new javax.swing.JButton();
//		jButton2 = new javax.swing.JButton();
//		jButton3 = new javax.swing.JButton();
//		jScrollPane2 = new javax.swing.JScrollPane();
//		lbArchetypes = new javax.swing.JList();
//
//		setDefaultCloseOperation(3);
//
//		pnlMain.setBorder(javax.swing.BorderFactory
//				.createLineBorder(new java.awt.Color(0, 0, 0)));
//		pnlMain.setLayout(new javax.swing.BoxLayout(pnlMain,
//				javax.swing.BoxLayout.LINE_AXIS));
//		jScrollPane1.setViewportView(pnlMain);
//
//		jButton1.setText("Save");
//		jButton1.addActionListener(new java.awt.event.ActionListener() {
//			public void actionPerformed(java.awt.event.ActionEvent evt) {
//				jButton1ActionPerformed(evt);
//			}
//		});
//
//		jButton2.setText("Load");
//		jButton2.addActionListener(new java.awt.event.ActionListener() {
//			public void actionPerformed(java.awt.event.ActionEvent evt) {
//				jButton2ActionPerformed(evt);
//			}
//		});
//
//		jButton3.setText("Clear");
//		jButton3.addActionListener(new java.awt.event.ActionListener() {
//			public void actionPerformed(java.awt.event.ActionEvent evt) {
//				jButton3ActionPerformed(evt);
//			}
//		});
//
//		jScrollPane2.setViewportView(lbArchetypes);
//
//		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
//				getContentPane());
//		getContentPane().setLayout(layout);
//		layout
//				.setHorizontalGroup(layout
//						.createParallelGroup(
//								org.jdesktop.layout.GroupLayout.LEADING)
//						.add(
//								layout
//										.createSequentialGroup()
//										.addContainerGap()
//										.add(
//												jScrollPane2,
//												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
//												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
//												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
//										.add(18, 18, 18)
//										.add(
//												jScrollPane1,
//												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
//												582,
//												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
//										.addPreferredGap(
//												org.jdesktop.layout.LayoutStyle.RELATED)
//										.add(
//												layout
//														.createParallelGroup(
//																org.jdesktop.layout.GroupLayout.TRAILING)
//														.add(jButton2).add(
//																jButton3).add(
//																jButton1))
//										.addContainerGap(107, Short.MAX_VALUE)));
//		layout
//				.setVerticalGroup(layout
//						.createParallelGroup(
//								org.jdesktop.layout.GroupLayout.LEADING)
//						.add(
//								layout
//										.createSequentialGroup()
//										.addContainerGap()
//										.add(
//												layout
//														.createParallelGroup(
//																org.jdesktop.layout.GroupLayout.LEADING)
//														.add(
//																jScrollPane1,
//																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
//																766,
//																Short.MAX_VALUE)
//														.add(
//																layout
//																		.createSequentialGroup()
//																		.add(
//																				jButton1)
//																		.addPreferredGap(
//																				org.jdesktop.layout.LayoutStyle.RELATED)
//																		.add(
//																				jButton2)
//																		.addPreferredGap(
//																				org.jdesktop.layout.LayoutStyle.RELATED)
//																		.add(
//																				jButton3))
//														.add(
//																jScrollPane2,
//																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
//																342,
//																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
//										.addContainerGap()));
//
//		pack();
//	}// </editor-fold>
//	//GEN-END:initComponents
//
//	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
//		clearForm();
//		try {
//			loadSelectedArchetype();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//	}
//
//	private String getSelectedArchetypeFileName() {
//		if (lbArchetypes.getSelectedIndex() < 0)
//			return null;
//		return lbArchetypes.getModel().getElementAt(
//				lbArchetypes.getSelectedIndex()).toString();
//	}
//
//	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
//		try {
////			ObjectContainer container = DB4OManager.getObjectContainer();
////			ClusterContainer loader = new ClusterContainer();
////			loader.clusterInstanceId = getSelectedArchetypeFileName();			
////
////			ObjectSet<ClusterContainer> clusterSet = container
////					.queryByExample(loader);
////
////			if (clusterSet.size() < 1)
////				return;
////			Cluster c = clusterSet.get(0).savedCluster;
////			container.activate(c, 100);
////			ClusterArchetypeWrapper wrapper = ArchetypeLoader
////					.getWrapperFromADL(getSelectedArchetypeFileName());
////			_archetypeWrapper = wrapper;
////			_composer = new GuiComposer(wrapper);
////			_composer.ComposeGui(this, c);
////			DB4OManager.closeObjectContainer();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//	}
//
//	public void clearForm() {
//		try {
//			pnlMain = new JPanel();
//			pnlMain.setBorder(javax.swing.BorderFactory
//					.createLineBorder(new java.awt.Color(0, 0, 0)));
//			pnlMain.setLayout(new javax.swing.BoxLayout(pnlMain,
//					javax.swing.BoxLayout.LINE_AXIS));
//			jScrollPane1.setViewportView(pnlMain);
//			_panelLayoutChanged = false;
//
//		} catch (Exception e) {
//			// TODO: handle exception
//		}
//	}
//
//	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
//		try {
//			if (lbArchetypes.getSelectedIndex() < 0)
//				return;
//			Cluster c = _archetypeWrapper.getCluster();
//			deleteExistingRecords();
//			ObjectContainer container = DB4OManager.getObjectContainer();
//			ClusterContainer clsContainer = new ClusterContainer();
//			clsContainer.clusterInstanceId = getSelectedArchetypeFileName();
//			clsContainer.savedCluster = c;
//			container.store(clsContainer);
//			container.store(_archetypeWrapper.getArchetype());
//			DB4OManager.closeObjectContainer();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//	}
//
//	private void deleteExistingRecords() {
//		ObjectContainer container = DB4OManager.getObjectContainer();
//		ClusterContainer clsContainer = new ClusterContainer();
//		clsContainer.clusterInstanceId = getSelectedArchetypeFileName();
//		ObjectSet<ClusterContainer> savedInstances = container
//				.queryByExample(clsContainer);
//		for (ClusterContainer cc : savedInstances) {
//			container.delete(cc);
//		}
//		DB4OManager.closeObjectContainer();
//	}
//
//	public static void main(String args[]) {
//		try {
//
//			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//
//			final MainForm m = new MainForm();
//			java.awt.EventQueue.invokeLater(new Runnable() {
//				public void run() {
//					m.setVisible(true);
//				}
//			});
//			//			m.loadDefaultArchetype();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//	}
//
//	protected void loadSelectedArchetype() throws Exception {
////		if (lbArchetypes.getSelectedIndex() < 0)
////			return;
////		String fileName = "/media/external/work/otherfiles/archetypes/" +  lbArchetypes.getModel().getElementAt(
////				lbArchetypes.getSelectedIndex()).toString();
////		_archetypeWrapper = ArchetypeLoader.getWrapperFromADL(fileName);
////		_composer = new GuiComposer(this._archetypeWrapper);
////		_composer.ComposeGui(this);
//	}
//
//	public void modifyMe(Component c) {
//		((TableLayout) pnlMain.getLayout()).insertRow(((TableLayout) pnlMain
//				.getLayout()).getNumColumn(), 25);
//		String constraint = "0,"
//				+ String.valueOf(((TableLayout) pnlMain.getLayout())
//						.getNumRow() - 1) + ",L,C";
//		pnlMain.add(c, constraint);
//		pnlMain.revalidate();
//	}
//
//	public void addComponentasRow(Component c) {
//		//we create layout for panel here, otherwise the designer will update the code
//		//on any change. Tablelayout is not supported by matisse yet!
//		if (!_panelLayoutChanged) {
//			pnlMain.setLayout(new TableLayout(new double[] { 450 },
//					new double[] { 30 }));
//			_panelLayoutChanged = true;
//		}
//		((TableLayout) pnlMain.getLayout()).insertRow(((TableLayout) pnlMain
//				.getLayout()).getNumRow(), 30);
//		String constraint = "0,"
//				+ String.valueOf(((TableLayout) pnlMain.getLayout())
//						.getNumRow() - 1) + ",L,C";
//		pnlMain.add(c, constraint);
//		pnlMain.doLayout();
//		pnlMain.repaint();
//		pack();
//	}
//
//	//GEN-BEGIN:variables
//	// Variables declaration - do not modify
//	private javax.swing.JButton jButton1;
//	private javax.swing.JButton jButton2;
//	private javax.swing.JButton jButton3;
//	private javax.swing.JScrollPane jScrollPane1;
//	private javax.swing.JScrollPane jScrollPane2;
//	private javax.swing.JList lbArchetypes;
//	private javax.swing.JPanel pnlMain;
//	// End of variables declaration//GEN-END:variables

}
