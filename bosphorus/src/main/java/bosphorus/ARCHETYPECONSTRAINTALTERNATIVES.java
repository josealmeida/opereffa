// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ARCHETYPECONSTRAINTALTERNATIVES implements Externalizable, Message<ARCHETYPECONSTRAINTALTERNATIVES>, Schema<ARCHETYPECONSTRAINTALTERNATIVES>
{

    public static Schema<ARCHETYPECONSTRAINTALTERNATIVES> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ARCHETYPECONSTRAINTALTERNATIVES getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ARCHETYPECONSTRAINTALTERNATIVES DEFAULT_INSTANCE = new ARCHETYPECONSTRAINTALTERNATIVES();

    
    private CSINGLEATTRIBUTE csingleattributefield;
    private CONSTRAINTREF constraintreffield;
    private ARCHETYPESLOT archetypeslotfield;
    private ARCHETYPEINTERNALREF archetypeinternalreffield;
    private CDOMAINTYPE cdomaintypefield;
    private CMULTIPLEATTRIBUTE cmultipleattributefield;
    private CPRIMITIVEOBJECT cprimitiveobjectfield;
    private CDEFINEDOBJECT cdefinedobjectfield;
    private CCOMPLEXOBJECT ccomplexobjectfield;

    public ARCHETYPECONSTRAINTALTERNATIVES()
    {
        
    }

    // getters and setters

    // csingleattributefield

    public CSINGLEATTRIBUTE getCsingleattributefield()
    {
        return csingleattributefield;
    }

    public void setCsingleattributefield(CSINGLEATTRIBUTE csingleattributefield)
    {
        this.csingleattributefield = csingleattributefield;
    }

    // constraintreffield

    public CONSTRAINTREF getConstraintreffield()
    {
        return constraintreffield;
    }

    public void setConstraintreffield(CONSTRAINTREF constraintreffield)
    {
        this.constraintreffield = constraintreffield;
    }

    // archetypeslotfield

    public ARCHETYPESLOT getArchetypeslotfield()
    {
        return archetypeslotfield;
    }

    public void setArchetypeslotfield(ARCHETYPESLOT archetypeslotfield)
    {
        this.archetypeslotfield = archetypeslotfield;
    }

    // archetypeinternalreffield

    public ARCHETYPEINTERNALREF getArchetypeinternalreffield()
    {
        return archetypeinternalreffield;
    }

    public void setArchetypeinternalreffield(ARCHETYPEINTERNALREF archetypeinternalreffield)
    {
        this.archetypeinternalreffield = archetypeinternalreffield;
    }

    // cdomaintypefield

    public CDOMAINTYPE getCdomaintypefield()
    {
        return cdomaintypefield;
    }

    public void setCdomaintypefield(CDOMAINTYPE cdomaintypefield)
    {
        this.cdomaintypefield = cdomaintypefield;
    }

    // cmultipleattributefield

    public CMULTIPLEATTRIBUTE getCmultipleattributefield()
    {
        return cmultipleattributefield;
    }

    public void setCmultipleattributefield(CMULTIPLEATTRIBUTE cmultipleattributefield)
    {
        this.cmultipleattributefield = cmultipleattributefield;
    }

    // cprimitiveobjectfield

    public CPRIMITIVEOBJECT getCprimitiveobjectfield()
    {
        return cprimitiveobjectfield;
    }

    public void setCprimitiveobjectfield(CPRIMITIVEOBJECT cprimitiveobjectfield)
    {
        this.cprimitiveobjectfield = cprimitiveobjectfield;
    }

    // cdefinedobjectfield

    public CDEFINEDOBJECT getCdefinedobjectfield()
    {
        return cdefinedobjectfield;
    }

    public void setCdefinedobjectfield(CDEFINEDOBJECT cdefinedobjectfield)
    {
        this.cdefinedobjectfield = cdefinedobjectfield;
    }

    // ccomplexobjectfield

    public CCOMPLEXOBJECT getCcomplexobjectfield()
    {
        return ccomplexobjectfield;
    }

    public void setCcomplexobjectfield(CCOMPLEXOBJECT ccomplexobjectfield)
    {
        this.ccomplexobjectfield = ccomplexobjectfield;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ARCHETYPECONSTRAINTALTERNATIVES> cachedSchema()
    {
        return this;
    }

    // schema methods

    public ARCHETYPECONSTRAINTALTERNATIVES newMessage()
    {
        return new ARCHETYPECONSTRAINTALTERNATIVES();
    }

    public Class<ARCHETYPECONSTRAINTALTERNATIVES> typeClass()
    {
        return ARCHETYPECONSTRAINTALTERNATIVES.class;
    }

    public String messageName()
    {
        return ARCHETYPECONSTRAINTALTERNATIVES.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ARCHETYPECONSTRAINTALTERNATIVES.class.getName();
    }

    public boolean isInitialized(ARCHETYPECONSTRAINTALTERNATIVES message)
    {
        return true;
    }

    public void mergeFrom(Input input, ARCHETYPECONSTRAINTALTERNATIVES message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.csingleattributefield = input.mergeObject(message.csingleattributefield, CSINGLEATTRIBUTE.getSchema());
                    break;

                case 2:
                    message.constraintreffield = input.mergeObject(message.constraintreffield, CONSTRAINTREF.getSchema());
                    break;

                case 3:
                    message.archetypeslotfield = input.mergeObject(message.archetypeslotfield, ARCHETYPESLOT.getSchema());
                    break;

                case 4:
                    message.archetypeinternalreffield = input.mergeObject(message.archetypeinternalreffield, ARCHETYPEINTERNALREF.getSchema());
                    break;

                case 5:
                    message.cdomaintypefield = input.mergeObject(message.cdomaintypefield, CDOMAINTYPE.getSchema());
                    break;

                case 6:
                    message.cmultipleattributefield = input.mergeObject(message.cmultipleattributefield, CMULTIPLEATTRIBUTE.getSchema());
                    break;

                case 7:
                    message.cprimitiveobjectfield = input.mergeObject(message.cprimitiveobjectfield, CPRIMITIVEOBJECT.getSchema());
                    break;

                case 8:
                    message.cdefinedobjectfield = input.mergeObject(message.cdefinedobjectfield, CDEFINEDOBJECT.getSchema());
                    break;

                case 9:
                    message.ccomplexobjectfield = input.mergeObject(message.ccomplexobjectfield, CCOMPLEXOBJECT.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ARCHETYPECONSTRAINTALTERNATIVES message) throws IOException
    {
        if(message.csingleattributefield != null)
             output.writeObject(1, message.csingleattributefield, CSINGLEATTRIBUTE.getSchema(), false);


        if(message.constraintreffield != null)
             output.writeObject(2, message.constraintreffield, CONSTRAINTREF.getSchema(), false);


        if(message.archetypeslotfield != null)
             output.writeObject(3, message.archetypeslotfield, ARCHETYPESLOT.getSchema(), false);


        if(message.archetypeinternalreffield != null)
             output.writeObject(4, message.archetypeinternalreffield, ARCHETYPEINTERNALREF.getSchema(), false);


        if(message.cdomaintypefield != null)
             output.writeObject(5, message.cdomaintypefield, CDOMAINTYPE.getSchema(), false);


        if(message.cmultipleattributefield != null)
             output.writeObject(6, message.cmultipleattributefield, CMULTIPLEATTRIBUTE.getSchema(), false);


        if(message.cprimitiveobjectfield != null)
             output.writeObject(7, message.cprimitiveobjectfield, CPRIMITIVEOBJECT.getSchema(), false);


        if(message.cdefinedobjectfield != null)
             output.writeObject(8, message.cdefinedobjectfield, CDEFINEDOBJECT.getSchema(), false);


        if(message.ccomplexobjectfield != null)
             output.writeObject(9, message.ccomplexobjectfield, CCOMPLEXOBJECT.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
