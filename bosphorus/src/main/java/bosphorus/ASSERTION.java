// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ASSERTION implements Externalizable, Message<ASSERTION>, Schema<ASSERTION>
{

    public static Schema<ASSERTION> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ASSERTION getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ASSERTION DEFAULT_INSTANCE = new ASSERTION();

    
    private String tag;
    private String stringexpression;
    private EXPRITEMALTERNATIVES expression;
    private List<ASSERTIONVARIABLE> variables;

    public ASSERTION()
    {
        
    }

    public ASSERTION(
        EXPRITEMALTERNATIVES expression
    )
    {
        this.expression = expression;
    }

    // getters and setters

    // tag

    public String getTag()
    {
        return tag;
    }

    public void setTag(String tag)
    {
        this.tag = tag;
    }

    // stringexpression

    public String getStringexpression()
    {
        return stringexpression;
    }

    public void setStringexpression(String stringexpression)
    {
        this.stringexpression = stringexpression;
    }

    // expression

    public EXPRITEMALTERNATIVES getExpression()
    {
        return expression;
    }

    public void setExpression(EXPRITEMALTERNATIVES expression)
    {
        this.expression = expression;
    }

    // variables

    public List<ASSERTIONVARIABLE> getVariablesList()
    {
        return variables;
    }

    public void setVariablesList(List<ASSERTIONVARIABLE> variables)
    {
        this.variables = variables;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ASSERTION> cachedSchema()
    {
        return this;
    }

    // schema methods

    public ASSERTION newMessage()
    {
        return new ASSERTION();
    }

    public Class<ASSERTION> typeClass()
    {
        return ASSERTION.class;
    }

    public String messageName()
    {
        return ASSERTION.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ASSERTION.class.getName();
    }

    public boolean isInitialized(ASSERTION message)
    {
        return 
            message.expression != null;
    }

    public void mergeFrom(Input input, ASSERTION message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.tag = input.readString();
                    break;
                case 2:
                    message.stringexpression = input.readString();
                    break;
                case 3:
                    message.expression = input.mergeObject(message.expression, EXPRITEMALTERNATIVES.getSchema());
                    break;

                case 4:
                    if(message.variables == null)
                        message.variables = new ArrayList<ASSERTIONVARIABLE>();
                    message.variables.add(input.mergeObject(null, ASSERTIONVARIABLE.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ASSERTION message) throws IOException
    {
        if(message.tag != null)
            output.writeString(1, message.tag, false);

        if(message.stringexpression != null)
            output.writeString(2, message.stringexpression, false);

        if(message.expression == null)
            throw new UninitializedMessageException(message);
        output.writeObject(3, message.expression, EXPRITEMALTERNATIVES.getSchema(), false);


        if(message.variables != null)
        {
            for(ASSERTIONVARIABLE variables : message.variables)
            {
                if(variables != null)
                    output.writeObject(4, variables, ASSERTIONVARIABLE.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
