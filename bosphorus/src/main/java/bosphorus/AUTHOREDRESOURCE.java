// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class AUTHOREDRESOURCE implements Externalizable, Message<AUTHOREDRESOURCE>, Schema<AUTHOREDRESOURCE>
{

    public static Schema<AUTHOREDRESOURCE> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static AUTHOREDRESOURCE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final AUTHOREDRESOURCE DEFAULT_INSTANCE = new AUTHOREDRESOURCE();

    
    private CODEPHRASE originallanguage;
    private Boolean iscontrolled;
    private RESOURCEDESCRIPTION description;
    private List<TRANSLATIONDETAILS> translations;
    private REVISIONHISTORY revisionhistory;

    public AUTHOREDRESOURCE()
    {
        
    }

    public AUTHOREDRESOURCE(
        CODEPHRASE originallanguage
    )
    {
        this.originallanguage = originallanguage;
    }

    // getters and setters

    // originallanguage

    public CODEPHRASE getOriginallanguage()
    {
        return originallanguage;
    }

    public void setOriginallanguage(CODEPHRASE originallanguage)
    {
        this.originallanguage = originallanguage;
    }

    // iscontrolled

    public Boolean getIscontrolled()
    {
        return iscontrolled;
    }

    public void setIscontrolled(Boolean iscontrolled)
    {
        this.iscontrolled = iscontrolled;
    }

    // description

    public RESOURCEDESCRIPTION getDescription()
    {
        return description;
    }

    public void setDescription(RESOURCEDESCRIPTION description)
    {
        this.description = description;
    }

    // translations

    public List<TRANSLATIONDETAILS> getTranslationsList()
    {
        return translations;
    }

    public void setTranslationsList(List<TRANSLATIONDETAILS> translations)
    {
        this.translations = translations;
    }

    // revisionhistory

    public REVISIONHISTORY getRevisionhistory()
    {
        return revisionhistory;
    }

    public void setRevisionhistory(REVISIONHISTORY revisionhistory)
    {
        this.revisionhistory = revisionhistory;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<AUTHOREDRESOURCE> cachedSchema()
    {
        return this;
    }

    // schema methods

    public AUTHOREDRESOURCE newMessage()
    {
        return new AUTHOREDRESOURCE();
    }

    public Class<AUTHOREDRESOURCE> typeClass()
    {
        return AUTHOREDRESOURCE.class;
    }

    public String messageName()
    {
        return AUTHOREDRESOURCE.class.getSimpleName();
    }

    public String messageFullName()
    {
        return AUTHOREDRESOURCE.class.getName();
    }

    public boolean isInitialized(AUTHOREDRESOURCE message)
    {
        return 
            message.originallanguage != null;
    }

    public void mergeFrom(Input input, AUTHOREDRESOURCE message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.originallanguage = input.mergeObject(message.originallanguage, CODEPHRASE.getSchema());
                    break;

                case 2:
                    message.iscontrolled = input.readBool();
                    break;
                case 3:
                    message.description = input.mergeObject(message.description, RESOURCEDESCRIPTION.getSchema());
                    break;

                case 4:
                    if(message.translations == null)
                        message.translations = new ArrayList<TRANSLATIONDETAILS>();
                    message.translations.add(input.mergeObject(null, TRANSLATIONDETAILS.getSchema()));
                    break;

                case 5:
                    message.revisionhistory = input.mergeObject(message.revisionhistory, REVISIONHISTORY.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, AUTHOREDRESOURCE message) throws IOException
    {
        if(message.originallanguage == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.originallanguage, CODEPHRASE.getSchema(), false);


        if(message.iscontrolled != null)
            output.writeBool(2, message.iscontrolled, false);

        if(message.description != null)
             output.writeObject(3, message.description, RESOURCEDESCRIPTION.getSchema(), false);


        if(message.translations != null)
        {
            for(TRANSLATIONDETAILS translations : message.translations)
            {
                if(translations != null)
                    output.writeObject(4, translations, TRANSLATIONDETAILS.getSchema(), true);
            }
        }


        if(message.revisionhistory != null)
             output.writeObject(5, message.revisionhistory, REVISIONHISTORY.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
