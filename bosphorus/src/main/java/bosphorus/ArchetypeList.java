// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ArchetypeList implements Externalizable, Message<ArchetypeList>, Schema<ArchetypeList>
{

    public static Schema<ArchetypeList> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ArchetypeList getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ArchetypeList DEFAULT_INSTANCE = new ArchetypeList();

    
    private List<String> names;

    public ArchetypeList()
    {
        
    }

    // getters and setters

    // names

    public List<String> getNamesList()
    {
        return names;
    }

    public void setNamesList(List<String> names)
    {
        this.names = names;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ArchetypeList> cachedSchema()
    {
        return this;
    }

    // schema methods

    public ArchetypeList newMessage()
    {
        return new ArchetypeList();
    }

    public Class<ArchetypeList> typeClass()
    {
        return ArchetypeList.class;
    }

    public String messageName()
    {
        return ArchetypeList.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ArchetypeList.class.getName();
    }

    public boolean isInitialized(ArchetypeList message)
    {
        return true;
    }

    public void mergeFrom(Input input, ArchetypeList message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.names == null)
                        message.names = new ArrayList<String>();
                    message.names.add(input.readString());
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ArchetypeList message) throws IOException
    {
        if(message.names != null)
        {
            for(String names : message.names)
            {
                if(names != null)
                    output.writeString(1, names, true);
            }
        }
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
