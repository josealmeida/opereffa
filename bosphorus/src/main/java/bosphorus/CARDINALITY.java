// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class CARDINALITY implements Externalizable, Message<CARDINALITY>, Schema<CARDINALITY>
{

    public static Schema<CARDINALITY> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static CARDINALITY getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CARDINALITY DEFAULT_INSTANCE = new CARDINALITY();

    
    private Boolean isordered;
    private Boolean isunique;
    private IntervalOfInteger interval;

    public CARDINALITY()
    {
        
    }

    public CARDINALITY(
        IntervalOfInteger interval
    )
    {
        this.interval = interval;
    }

    // getters and setters

    // isordered

    public Boolean getIsordered()
    {
        return isordered;
    }

    public void setIsordered(Boolean isordered)
    {
        this.isordered = isordered;
    }

    // isunique

    public Boolean getIsunique()
    {
        return isunique;
    }

    public void setIsunique(Boolean isunique)
    {
        this.isunique = isunique;
    }

    // interval

    public IntervalOfInteger getInterval()
    {
        return interval;
    }

    public void setInterval(IntervalOfInteger interval)
    {
        this.interval = interval;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<CARDINALITY> cachedSchema()
    {
        return this;
    }

    // schema methods

    public CARDINALITY newMessage()
    {
        return new CARDINALITY();
    }

    public Class<CARDINALITY> typeClass()
    {
        return CARDINALITY.class;
    }

    public String messageName()
    {
        return CARDINALITY.class.getSimpleName();
    }

    public String messageFullName()
    {
        return CARDINALITY.class.getName();
    }

    public boolean isInitialized(CARDINALITY message)
    {
        return 
            message.interval != null;
    }

    public void mergeFrom(Input input, CARDINALITY message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.isordered = input.readBool();
                    break;
                case 2:
                    message.isunique = input.readBool();
                    break;
                case 3:
                    message.interval = input.mergeObject(message.interval, IntervalOfInteger.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, CARDINALITY message) throws IOException
    {
        if(message.isordered != null)
            output.writeBool(1, message.isordered, false);

        if(message.isunique != null)
            output.writeBool(2, message.isunique, false);

        if(message.interval == null)
            throw new UninitializedMessageException(message);
        output.writeObject(3, message.interval, IntervalOfInteger.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
