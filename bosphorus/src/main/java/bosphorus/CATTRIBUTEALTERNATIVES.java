// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class CATTRIBUTEALTERNATIVES implements Externalizable, Message<CATTRIBUTEALTERNATIVES>, Schema<CATTRIBUTEALTERNATIVES>
{

    public static Schema<CATTRIBUTEALTERNATIVES> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static CATTRIBUTEALTERNATIVES getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CATTRIBUTEALTERNATIVES DEFAULT_INSTANCE = new CATTRIBUTEALTERNATIVES();

    
    private CSINGLEATTRIBUTE csingleattributefield;
    private CMULTIPLEATTRIBUTE cmultipleattributefield;

    public CATTRIBUTEALTERNATIVES()
    {
        
    }

    // getters and setters

    // csingleattributefield

    public CSINGLEATTRIBUTE getCsingleattributefield()
    {
        return csingleattributefield;
    }

    public void setCsingleattributefield(CSINGLEATTRIBUTE csingleattributefield)
    {
        this.csingleattributefield = csingleattributefield;
    }

    // cmultipleattributefield

    public CMULTIPLEATTRIBUTE getCmultipleattributefield()
    {
        return cmultipleattributefield;
    }

    public void setCmultipleattributefield(CMULTIPLEATTRIBUTE cmultipleattributefield)
    {
        this.cmultipleattributefield = cmultipleattributefield;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<CATTRIBUTEALTERNATIVES> cachedSchema()
    {
        return this;
    }

    // schema methods

    public CATTRIBUTEALTERNATIVES newMessage()
    {
        return new CATTRIBUTEALTERNATIVES();
    }

    public Class<CATTRIBUTEALTERNATIVES> typeClass()
    {
        return CATTRIBUTEALTERNATIVES.class;
    }

    public String messageName()
    {
        return CATTRIBUTEALTERNATIVES.class.getSimpleName();
    }

    public String messageFullName()
    {
        return CATTRIBUTEALTERNATIVES.class.getName();
    }

    public boolean isInitialized(CATTRIBUTEALTERNATIVES message)
    {
        return true;
    }

    public void mergeFrom(Input input, CATTRIBUTEALTERNATIVES message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.csingleattributefield = input.mergeObject(message.csingleattributefield, CSINGLEATTRIBUTE.getSchema());
                    break;

                case 2:
                    message.cmultipleattributefield = input.mergeObject(message.cmultipleattributefield, CMULTIPLEATTRIBUTE.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, CATTRIBUTEALTERNATIVES message) throws IOException
    {
        if(message.csingleattributefield != null)
             output.writeObject(1, message.csingleattributefield, CSINGLEATTRIBUTE.getSchema(), false);


        if(message.cmultipleattributefield != null)
             output.writeObject(2, message.cmultipleattributefield, CMULTIPLEATTRIBUTE.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
