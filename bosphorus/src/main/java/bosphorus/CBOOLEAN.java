// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class CBOOLEAN implements Externalizable, Message<CBOOLEAN>, Schema<CBOOLEAN>
{

    public static Schema<CBOOLEAN> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static CBOOLEAN getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CBOOLEAN DEFAULT_INSTANCE = new CBOOLEAN();

    
    private Boolean truevalid;
    private Boolean falsevalid;
    private Boolean assumedvalue;

    public CBOOLEAN()
    {
        
    }

    // getters and setters

    // truevalid

    public Boolean getTruevalid()
    {
        return truevalid;
    }

    public void setTruevalid(Boolean truevalid)
    {
        this.truevalid = truevalid;
    }

    // falsevalid

    public Boolean getFalsevalid()
    {
        return falsevalid;
    }

    public void setFalsevalid(Boolean falsevalid)
    {
        this.falsevalid = falsevalid;
    }

    // assumedvalue

    public Boolean getAssumedvalue()
    {
        return assumedvalue;
    }

    public void setAssumedvalue(Boolean assumedvalue)
    {
        this.assumedvalue = assumedvalue;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<CBOOLEAN> cachedSchema()
    {
        return this;
    }

    // schema methods

    public CBOOLEAN newMessage()
    {
        return new CBOOLEAN();
    }

    public Class<CBOOLEAN> typeClass()
    {
        return CBOOLEAN.class;
    }

    public String messageName()
    {
        return CBOOLEAN.class.getSimpleName();
    }

    public String messageFullName()
    {
        return CBOOLEAN.class.getName();
    }

    public boolean isInitialized(CBOOLEAN message)
    {
        return true;
    }

    public void mergeFrom(Input input, CBOOLEAN message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.truevalid = input.readBool();
                    break;
                case 2:
                    message.falsevalid = input.readBool();
                    break;
                case 3:
                    message.assumedvalue = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, CBOOLEAN message) throws IOException
    {
        if(message.truevalid != null)
            output.writeBool(1, message.truevalid, false);

        if(message.falsevalid != null)
            output.writeBool(2, message.falsevalid, false);

        if(message.assumedvalue != null)
            output.writeBool(3, message.assumedvalue, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
