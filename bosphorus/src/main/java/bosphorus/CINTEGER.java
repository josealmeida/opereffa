// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class CINTEGER implements Externalizable, Message<CINTEGER>, Schema<CINTEGER>
{

    public static Schema<CINTEGER> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static CINTEGER getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CINTEGER DEFAULT_INSTANCE = new CINTEGER();

    
    private List<Integer> list;
    private IntervalOfInteger range;
    private Integer assumedvalue;

    public CINTEGER()
    {
        
    }

    // getters and setters

    // list

    public List<Integer> getListList()
    {
        return list;
    }

    public void setListList(List<Integer> list)
    {
        this.list = list;
    }

    // range

    public IntervalOfInteger getRange()
    {
        return range;
    }

    public void setRange(IntervalOfInteger range)
    {
        this.range = range;
    }

    // assumedvalue

    public Integer getAssumedvalue()
    {
        return assumedvalue;
    }

    public void setAssumedvalue(Integer assumedvalue)
    {
        this.assumedvalue = assumedvalue;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<CINTEGER> cachedSchema()
    {
        return this;
    }

    // schema methods

    public CINTEGER newMessage()
    {
        return new CINTEGER();
    }

    public Class<CINTEGER> typeClass()
    {
        return CINTEGER.class;
    }

    public String messageName()
    {
        return CINTEGER.class.getSimpleName();
    }

    public String messageFullName()
    {
        return CINTEGER.class.getName();
    }

    public boolean isInitialized(CINTEGER message)
    {
        return true;
    }

    public void mergeFrom(Input input, CINTEGER message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.list == null)
                        message.list = new ArrayList<Integer>();
                    message.list.add(input.readInt32());
                    break;
                case 2:
                    message.range = input.mergeObject(message.range, IntervalOfInteger.getSchema());
                    break;

                case 3:
                    message.assumedvalue = input.readInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, CINTEGER message) throws IOException
    {
        if(message.list != null)
        {
            for(Integer list : message.list)
            {
                if(list != null)
                    output.writeInt32(1, list, true);
            }
        }

        if(message.range != null)
             output.writeObject(2, message.range, IntervalOfInteger.getSchema(), false);


        if(message.assumedvalue != null)
            output.writeInt32(3, message.assumedvalue, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
