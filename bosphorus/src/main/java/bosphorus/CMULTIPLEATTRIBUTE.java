// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class CMULTIPLEATTRIBUTE implements Externalizable, Message<CMULTIPLEATTRIBUTE>, Schema<CMULTIPLEATTRIBUTE>
{

    public static Schema<CMULTIPLEATTRIBUTE> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static CMULTIPLEATTRIBUTE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CMULTIPLEATTRIBUTE DEFAULT_INSTANCE = new CMULTIPLEATTRIBUTE();

    
    private CARDINALITY cardinality;
    private String rmattributename;
    private IntervalOfInteger existence;
    private List<COBJECTALTERNATIVES> children;

    public CMULTIPLEATTRIBUTE()
    {
        
    }

    public CMULTIPLEATTRIBUTE(
        CARDINALITY cardinality,
        String rmattributename,
        IntervalOfInteger existence
    )
    {
        this.cardinality = cardinality;
        this.rmattributename = rmattributename;
        this.existence = existence;
    }

    // getters and setters

    // cardinality

    public CARDINALITY getCardinality()
    {
        return cardinality;
    }

    public void setCardinality(CARDINALITY cardinality)
    {
        this.cardinality = cardinality;
    }

    // rmattributename

    public String getRmattributename()
    {
        return rmattributename;
    }

    public void setRmattributename(String rmattributename)
    {
        this.rmattributename = rmattributename;
    }

    // existence

    public IntervalOfInteger getExistence()
    {
        return existence;
    }

    public void setExistence(IntervalOfInteger existence)
    {
        this.existence = existence;
    }

    // children

    public List<COBJECTALTERNATIVES> getChildrenList()
    {
        return children;
    }

    public void setChildrenList(List<COBJECTALTERNATIVES> children)
    {
        this.children = children;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<CMULTIPLEATTRIBUTE> cachedSchema()
    {
        return this;
    }

    // schema methods

    public CMULTIPLEATTRIBUTE newMessage()
    {
        return new CMULTIPLEATTRIBUTE();
    }

    public Class<CMULTIPLEATTRIBUTE> typeClass()
    {
        return CMULTIPLEATTRIBUTE.class;
    }

    public String messageName()
    {
        return CMULTIPLEATTRIBUTE.class.getSimpleName();
    }

    public String messageFullName()
    {
        return CMULTIPLEATTRIBUTE.class.getName();
    }

    public boolean isInitialized(CMULTIPLEATTRIBUTE message)
    {
        return 
            message.cardinality != null 
            && message.rmattributename != null 
            && message.existence != null;
    }

    public void mergeFrom(Input input, CMULTIPLEATTRIBUTE message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.cardinality = input.mergeObject(message.cardinality, CARDINALITY.getSchema());
                    break;

                case 2:
                    message.rmattributename = input.readString();
                    break;
                case 3:
                    message.existence = input.mergeObject(message.existence, IntervalOfInteger.getSchema());
                    break;

                case 4:
                    if(message.children == null)
                        message.children = new ArrayList<COBJECTALTERNATIVES>();
                    message.children.add(input.mergeObject(null, COBJECTALTERNATIVES.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, CMULTIPLEATTRIBUTE message) throws IOException
    {
        if(message.cardinality == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.cardinality, CARDINALITY.getSchema(), false);


        if(message.rmattributename == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.rmattributename, false);

        if(message.existence == null)
            throw new UninitializedMessageException(message);
        output.writeObject(3, message.existence, IntervalOfInteger.getSchema(), false);


        if(message.children != null)
        {
            for(COBJECTALTERNATIVES children : message.children)
            {
                if(children != null)
                    output.writeObject(4, children, COBJECTALTERNATIVES.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
