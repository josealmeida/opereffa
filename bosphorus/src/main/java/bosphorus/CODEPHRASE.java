// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class CODEPHRASE implements Externalizable, Message<CODEPHRASE>, Schema<CODEPHRASE>
{

    public static Schema<CODEPHRASE> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static CODEPHRASE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CODEPHRASE DEFAULT_INSTANCE = new CODEPHRASE();

    
    private TERMINOLOGYID terminologyid;
    private String codestring;

    public CODEPHRASE()
    {
        
    }

    public CODEPHRASE(
        TERMINOLOGYID terminologyid,
        String codestring
    )
    {
        this.terminologyid = terminologyid;
        this.codestring = codestring;
    }

    // getters and setters

    // terminologyid

    public TERMINOLOGYID getTerminologyid()
    {
        return terminologyid;
    }

    public void setTerminologyid(TERMINOLOGYID terminologyid)
    {
        this.terminologyid = terminologyid;
    }

    // codestring

    public String getCodestring()
    {
        return codestring;
    }

    public void setCodestring(String codestring)
    {
        this.codestring = codestring;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<CODEPHRASE> cachedSchema()
    {
        return this;
    }

    // schema methods

    public CODEPHRASE newMessage()
    {
        return new CODEPHRASE();
    }

    public Class<CODEPHRASE> typeClass()
    {
        return CODEPHRASE.class;
    }

    public String messageName()
    {
        return CODEPHRASE.class.getSimpleName();
    }

    public String messageFullName()
    {
        return CODEPHRASE.class.getName();
    }

    public boolean isInitialized(CODEPHRASE message)
    {
        return 
            message.terminologyid != null 
            && message.codestring != null;
    }

    public void mergeFrom(Input input, CODEPHRASE message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.terminologyid = input.mergeObject(message.terminologyid, TERMINOLOGYID.getSchema());
                    break;

                case 2:
                    message.codestring = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, CODEPHRASE message) throws IOException
    {
        if(message.terminologyid == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.terminologyid, TERMINOLOGYID.getSchema(), false);


        if(message.codestring == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.codestring, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
