// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class CREAL implements Externalizable, Message<CREAL>, Schema<CREAL>
{

    public static Schema<CREAL> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static CREAL getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CREAL DEFAULT_INSTANCE = new CREAL();

    
    private List<String> list;
    private IntervalOfReal range;
    private String assumedvalue;

    public CREAL()
    {
        
    }

    // getters and setters

    // list

    public List<String> getListList()
    {
        return list;
    }

    public void setListList(List<String> list)
    {
        this.list = list;
    }

    // range

    public IntervalOfReal getRange()
    {
        return range;
    }

    public void setRange(IntervalOfReal range)
    {
        this.range = range;
    }

    // assumedvalue

    public String getAssumedvalue()
    {
        return assumedvalue;
    }

    public void setAssumedvalue(String assumedvalue)
    {
        this.assumedvalue = assumedvalue;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<CREAL> cachedSchema()
    {
        return this;
    }

    // schema methods

    public CREAL newMessage()
    {
        return new CREAL();
    }

    public Class<CREAL> typeClass()
    {
        return CREAL.class;
    }

    public String messageName()
    {
        return CREAL.class.getSimpleName();
    }

    public String messageFullName()
    {
        return CREAL.class.getName();
    }

    public boolean isInitialized(CREAL message)
    {
        return true;
    }

    public void mergeFrom(Input input, CREAL message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.list == null)
                        message.list = new ArrayList<String>();
                    message.list.add(input.readString());
                    break;
                case 2:
                    message.range = input.mergeObject(message.range, IntervalOfReal.getSchema());
                    break;

                case 3:
                    message.assumedvalue = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, CREAL message) throws IOException
    {
        if(message.list != null)
        {
            for(String list : message.list)
            {
                if(list != null)
                    output.writeString(1, list, true);
            }
        }

        if(message.range != null)
             output.writeObject(2, message.range, IntervalOfReal.getSchema(), false);


        if(message.assumedvalue != null)
            output.writeString(3, message.assumedvalue, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
