// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class DVPARAGRAPH implements Externalizable, Message<DVPARAGRAPH>, Schema<DVPARAGRAPH>
{

    public static Schema<DVPARAGRAPH> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static DVPARAGRAPH getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DVPARAGRAPH DEFAULT_INSTANCE = new DVPARAGRAPH();

    
    private List<DVTEXT> items;

    public DVPARAGRAPH()
    {
        
    }

    // getters and setters

    // items

    public List<DVTEXT> getItemsList()
    {
        return items;
    }

    public void setItemsList(List<DVTEXT> items)
    {
        this.items = items;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<DVPARAGRAPH> cachedSchema()
    {
        return this;
    }

    // schema methods

    public DVPARAGRAPH newMessage()
    {
        return new DVPARAGRAPH();
    }

    public Class<DVPARAGRAPH> typeClass()
    {
        return DVPARAGRAPH.class;
    }

    public String messageName()
    {
        return DVPARAGRAPH.class.getSimpleName();
    }

    public String messageFullName()
    {
        return DVPARAGRAPH.class.getName();
    }

    public boolean isInitialized(DVPARAGRAPH message)
    {
        return true;
    }

    public void mergeFrom(Input input, DVPARAGRAPH message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.items == null)
                        message.items = new ArrayList<DVTEXT>();
                    message.items.add(input.mergeObject(null, DVTEXT.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, DVPARAGRAPH message) throws IOException
    {
        if(message.items != null)
        {
            for(DVTEXT items : message.items)
            {
                if(items != null)
                    output.writeObject(1, items, DVTEXT.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
