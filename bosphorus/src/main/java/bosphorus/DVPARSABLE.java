// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class DVPARSABLE implements Externalizable, Message<DVPARSABLE>, Schema<DVPARSABLE>
{

    public static Schema<DVPARSABLE> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static DVPARSABLE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DVPARSABLE DEFAULT_INSTANCE = new DVPARSABLE();

    
    private String value;
    private String formalism;
    private CODEPHRASE charset;
    private CODEPHRASE language;

    public DVPARSABLE()
    {
        
    }

    public DVPARSABLE(
        String value,
        String formalism
    )
    {
        this.value = value;
        this.formalism = formalism;
    }

    // getters and setters

    // value

    public String getValue()
    {
        return value;
    }

    public void setValue(String value)
    {
        this.value = value;
    }

    // formalism

    public String getFormalism()
    {
        return formalism;
    }

    public void setFormalism(String formalism)
    {
        this.formalism = formalism;
    }

    // charset

    public CODEPHRASE getCharset()
    {
        return charset;
    }

    public void setCharset(CODEPHRASE charset)
    {
        this.charset = charset;
    }

    // language

    public CODEPHRASE getLanguage()
    {
        return language;
    }

    public void setLanguage(CODEPHRASE language)
    {
        this.language = language;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<DVPARSABLE> cachedSchema()
    {
        return this;
    }

    // schema methods

    public DVPARSABLE newMessage()
    {
        return new DVPARSABLE();
    }

    public Class<DVPARSABLE> typeClass()
    {
        return DVPARSABLE.class;
    }

    public String messageName()
    {
        return DVPARSABLE.class.getSimpleName();
    }

    public String messageFullName()
    {
        return DVPARSABLE.class.getName();
    }

    public boolean isInitialized(DVPARSABLE message)
    {
        return 
            message.value != null 
            && message.formalism != null;
    }

    public void mergeFrom(Input input, DVPARSABLE message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.value = input.readString();
                    break;
                case 2:
                    message.formalism = input.readString();
                    break;
                case 3:
                    message.charset = input.mergeObject(message.charset, CODEPHRASE.getSchema());
                    break;

                case 4:
                    message.language = input.mergeObject(message.language, CODEPHRASE.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, DVPARSABLE message) throws IOException
    {
        if(message.value == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.value, false);

        if(message.formalism == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.formalism, false);

        if(message.charset != null)
             output.writeObject(3, message.charset, CODEPHRASE.getSchema(), false);


        if(message.language != null)
             output.writeObject(4, message.language, CODEPHRASE.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
