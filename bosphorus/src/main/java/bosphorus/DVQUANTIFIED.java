// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class DVQUANTIFIED implements Externalizable, Message<DVQUANTIFIED>, Schema<DVQUANTIFIED>
{

    public static Schema<DVQUANTIFIED> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static DVQUANTIFIED getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DVQUANTIFIED DEFAULT_INSTANCE = new DVQUANTIFIED();

    
    private String magnitudestatus;
    private DVINTERVAL normalrange;
    private List<REFERENCERANGE> otherreferenceranges;
    private CODEPHRASE normalstatus;

    public DVQUANTIFIED()
    {
        
    }

    // getters and setters

    // magnitudestatus

    public String getMagnitudestatus()
    {
        return magnitudestatus;
    }

    public void setMagnitudestatus(String magnitudestatus)
    {
        this.magnitudestatus = magnitudestatus;
    }

    // normalrange

    public DVINTERVAL getNormalrange()
    {
        return normalrange;
    }

    public void setNormalrange(DVINTERVAL normalrange)
    {
        this.normalrange = normalrange;
    }

    // otherreferenceranges

    public List<REFERENCERANGE> getOtherreferencerangesList()
    {
        return otherreferenceranges;
    }

    public void setOtherreferencerangesList(List<REFERENCERANGE> otherreferenceranges)
    {
        this.otherreferenceranges = otherreferenceranges;
    }

    // normalstatus

    public CODEPHRASE getNormalstatus()
    {
        return normalstatus;
    }

    public void setNormalstatus(CODEPHRASE normalstatus)
    {
        this.normalstatus = normalstatus;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<DVQUANTIFIED> cachedSchema()
    {
        return this;
    }

    // schema methods

    public DVQUANTIFIED newMessage()
    {
        return new DVQUANTIFIED();
    }

    public Class<DVQUANTIFIED> typeClass()
    {
        return DVQUANTIFIED.class;
    }

    public String messageName()
    {
        return DVQUANTIFIED.class.getSimpleName();
    }

    public String messageFullName()
    {
        return DVQUANTIFIED.class.getName();
    }

    public boolean isInitialized(DVQUANTIFIED message)
    {
        return true;
    }

    public void mergeFrom(Input input, DVQUANTIFIED message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.magnitudestatus = input.readString();
                    break;
                case 2:
                    message.normalrange = input.mergeObject(message.normalrange, DVINTERVAL.getSchema());
                    break;

                case 3:
                    if(message.otherreferenceranges == null)
                        message.otherreferenceranges = new ArrayList<REFERENCERANGE>();
                    message.otherreferenceranges.add(input.mergeObject(null, REFERENCERANGE.getSchema()));
                    break;

                case 4:
                    message.normalstatus = input.mergeObject(message.normalstatus, CODEPHRASE.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, DVQUANTIFIED message) throws IOException
    {
        if(message.magnitudestatus != null)
            output.writeString(1, message.magnitudestatus, false);

        if(message.normalrange != null)
             output.writeObject(2, message.normalrange, DVINTERVAL.getSchema(), false);


        if(message.otherreferenceranges != null)
        {
            for(REFERENCERANGE otherreferenceranges : message.otherreferenceranges)
            {
                if(otherreferenceranges != null)
                    output.writeObject(3, otherreferenceranges, REFERENCERANGE.getSchema(), true);
            }
        }


        if(message.normalstatus != null)
             output.writeObject(4, message.normalstatus, CODEPHRASE.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
