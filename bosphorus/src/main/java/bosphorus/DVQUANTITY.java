// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class DVQUANTITY implements Externalizable, Message<DVQUANTITY>, Schema<DVQUANTITY>
{

    public static Schema<DVQUANTITY> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static DVQUANTITY getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DVQUANTITY DEFAULT_INSTANCE = new DVQUANTITY();

    
    private String magnitude;
    private String units;
    private Integer precision;
    private DVINTERVAL normalrange;
    private List<REFERENCERANGE> otherreferenceranges;
    private CODEPHRASE normalstatus;
    private String magnitudestatus;
    private String accuracy;
    private Boolean accuracyispercent;

    public DVQUANTITY()
    {
        
    }

    public DVQUANTITY(
        String units
    )
    {
        this.units = units;
    }

    // getters and setters

    // magnitude

    public String getMagnitude()
    {
        return magnitude;
    }

    public void setMagnitude(String magnitude)
    {
        this.magnitude = magnitude;
    }

    // units

    public String getUnits()
    {
        return units;
    }

    public void setUnits(String units)
    {
        this.units = units;
    }

    // precision

    public Integer getPrecision()
    {
        return precision;
    }

    public void setPrecision(Integer precision)
    {
        this.precision = precision;
    }

    // normalrange

    public DVINTERVAL getNormalrange()
    {
        return normalrange;
    }

    public void setNormalrange(DVINTERVAL normalrange)
    {
        this.normalrange = normalrange;
    }

    // otherreferenceranges

    public List<REFERENCERANGE> getOtherreferencerangesList()
    {
        return otherreferenceranges;
    }

    public void setOtherreferencerangesList(List<REFERENCERANGE> otherreferenceranges)
    {
        this.otherreferenceranges = otherreferenceranges;
    }

    // normalstatus

    public CODEPHRASE getNormalstatus()
    {
        return normalstatus;
    }

    public void setNormalstatus(CODEPHRASE normalstatus)
    {
        this.normalstatus = normalstatus;
    }

    // magnitudestatus

    public String getMagnitudestatus()
    {
        return magnitudestatus;
    }

    public void setMagnitudestatus(String magnitudestatus)
    {
        this.magnitudestatus = magnitudestatus;
    }

    // accuracy

    public String getAccuracy()
    {
        return accuracy;
    }

    public void setAccuracy(String accuracy)
    {
        this.accuracy = accuracy;
    }

    // accuracyispercent

    public Boolean getAccuracyispercent()
    {
        return accuracyispercent;
    }

    public void setAccuracyispercent(Boolean accuracyispercent)
    {
        this.accuracyispercent = accuracyispercent;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<DVQUANTITY> cachedSchema()
    {
        return this;
    }

    // schema methods

    public DVQUANTITY newMessage()
    {
        return new DVQUANTITY();
    }

    public Class<DVQUANTITY> typeClass()
    {
        return DVQUANTITY.class;
    }

    public String messageName()
    {
        return DVQUANTITY.class.getSimpleName();
    }

    public String messageFullName()
    {
        return DVQUANTITY.class.getName();
    }

    public boolean isInitialized(DVQUANTITY message)
    {
        return 
            message.units != null;
    }

    public void mergeFrom(Input input, DVQUANTITY message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.magnitude = input.readString();
                    break;
                case 2:
                    message.units = input.readString();
                    break;
                case 3:
                    message.precision = input.readInt32();
                    break;
                case 4:
                    message.normalrange = input.mergeObject(message.normalrange, DVINTERVAL.getSchema());
                    break;

                case 5:
                    if(message.otherreferenceranges == null)
                        message.otherreferenceranges = new ArrayList<REFERENCERANGE>();
                    message.otherreferenceranges.add(input.mergeObject(null, REFERENCERANGE.getSchema()));
                    break;

                case 6:
                    message.normalstatus = input.mergeObject(message.normalstatus, CODEPHRASE.getSchema());
                    break;

                case 7:
                    message.magnitudestatus = input.readString();
                    break;
                case 8:
                    message.accuracy = input.readString();
                    break;
                case 9:
                    message.accuracyispercent = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, DVQUANTITY message) throws IOException
    {
        if(message.magnitude != null)
            output.writeString(1, message.magnitude, false);

        if(message.units == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.units, false);

        if(message.precision != null)
            output.writeInt32(3, message.precision, false);

        if(message.normalrange != null)
             output.writeObject(4, message.normalrange, DVINTERVAL.getSchema(), false);


        if(message.otherreferenceranges != null)
        {
            for(REFERENCERANGE otherreferenceranges : message.otherreferenceranges)
            {
                if(otherreferenceranges != null)
                    output.writeObject(5, otherreferenceranges, REFERENCERANGE.getSchema(), true);
            }
        }


        if(message.normalstatus != null)
             output.writeObject(6, message.normalstatus, CODEPHRASE.getSchema(), false);


        if(message.magnitudestatus != null)
            output.writeString(7, message.magnitudestatus, false);

        if(message.accuracy != null)
            output.writeString(8, message.accuracy, false);

        if(message.accuracyispercent != null)
            output.writeBool(9, message.accuracyispercent, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
