// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class DVSTATE implements Externalizable, Message<DVSTATE>, Schema<DVSTATE>
{

    public static Schema<DVSTATE> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static DVSTATE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DVSTATE DEFAULT_INSTANCE = new DVSTATE();

    
    private DVCODEDTEXT value;
    private Boolean isterminal;

    public DVSTATE()
    {
        
    }

    public DVSTATE(
        DVCODEDTEXT value
    )
    {
        this.value = value;
    }

    // getters and setters

    // value

    public DVCODEDTEXT getValue()
    {
        return value;
    }

    public void setValue(DVCODEDTEXT value)
    {
        this.value = value;
    }

    // isterminal

    public Boolean getIsterminal()
    {
        return isterminal;
    }

    public void setIsterminal(Boolean isterminal)
    {
        this.isterminal = isterminal;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<DVSTATE> cachedSchema()
    {
        return this;
    }

    // schema methods

    public DVSTATE newMessage()
    {
        return new DVSTATE();
    }

    public Class<DVSTATE> typeClass()
    {
        return DVSTATE.class;
    }

    public String messageName()
    {
        return DVSTATE.class.getSimpleName();
    }

    public String messageFullName()
    {
        return DVSTATE.class.getName();
    }

    public boolean isInitialized(DVSTATE message)
    {
        return 
            message.value != null;
    }

    public void mergeFrom(Input input, DVSTATE message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.value = input.mergeObject(message.value, DVCODEDTEXT.getSchema());
                    break;

                case 2:
                    message.isterminal = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, DVSTATE message) throws IOException
    {
        if(message.value == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.value, DVCODEDTEXT.getSchema(), false);


        if(message.isterminal != null)
            output.writeBool(2, message.isterminal, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
