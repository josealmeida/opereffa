// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class EXPRLEAF implements Externalizable, Message<EXPRLEAF>, Schema<EXPRLEAF>
{

    public static Schema<EXPRLEAF> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static EXPRLEAF getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final EXPRLEAF DEFAULT_INSTANCE = new EXPRLEAF();

    
    private String item;
    private String referencetype;
    private String type;

    public EXPRLEAF()
    {
        
    }

    public EXPRLEAF(
        String item,
        String referencetype,
        String type
    )
    {
        this.item = item;
        this.referencetype = referencetype;
        this.type = type;
    }

    // getters and setters

    // item

    public String getItem()
    {
        return item;
    }

    public void setItem(String item)
    {
        this.item = item;
    }

    // referencetype

    public String getReferencetype()
    {
        return referencetype;
    }

    public void setReferencetype(String referencetype)
    {
        this.referencetype = referencetype;
    }

    // type

    public String getType()
    {
        return type;
    }

    public void setType(String type)
    {
        this.type = type;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<EXPRLEAF> cachedSchema()
    {
        return this;
    }

    // schema methods

    public EXPRLEAF newMessage()
    {
        return new EXPRLEAF();
    }

    public Class<EXPRLEAF> typeClass()
    {
        return EXPRLEAF.class;
    }

    public String messageName()
    {
        return EXPRLEAF.class.getSimpleName();
    }

    public String messageFullName()
    {
        return EXPRLEAF.class.getName();
    }

    public boolean isInitialized(EXPRLEAF message)
    {
        return 
            message.item != null 
            && message.referencetype != null 
            && message.type != null;
    }

    public void mergeFrom(Input input, EXPRLEAF message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.item = input.readString();
                    break;
                case 2:
                    message.referencetype = input.readString();
                    break;
                case 3:
                    message.type = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, EXPRLEAF message) throws IOException
    {
        if(message.item == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.item, false);

        if(message.referencetype == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.referencetype, false);

        if(message.type == null)
            throw new UninitializedMessageException(message);
        output.writeString(3, message.type, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
