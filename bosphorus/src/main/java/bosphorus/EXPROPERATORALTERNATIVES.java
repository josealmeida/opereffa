// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class EXPROPERATORALTERNATIVES implements Externalizable, Message<EXPROPERATORALTERNATIVES>, Schema<EXPROPERATORALTERNATIVES>
{

    public static Schema<EXPROPERATORALTERNATIVES> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static EXPROPERATORALTERNATIVES getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final EXPROPERATORALTERNATIVES DEFAULT_INSTANCE = new EXPROPERATORALTERNATIVES();

    
    private EXPRBINARYOPERATOR exprbinaryoperatorfield;
    private EXPRUNARYOPERATOR exprunaryoperatorfield;

    public EXPROPERATORALTERNATIVES()
    {
        
    }

    // getters and setters

    // exprbinaryoperatorfield

    public EXPRBINARYOPERATOR getExprbinaryoperatorfield()
    {
        return exprbinaryoperatorfield;
    }

    public void setExprbinaryoperatorfield(EXPRBINARYOPERATOR exprbinaryoperatorfield)
    {
        this.exprbinaryoperatorfield = exprbinaryoperatorfield;
    }

    // exprunaryoperatorfield

    public EXPRUNARYOPERATOR getExprunaryoperatorfield()
    {
        return exprunaryoperatorfield;
    }

    public void setExprunaryoperatorfield(EXPRUNARYOPERATOR exprunaryoperatorfield)
    {
        this.exprunaryoperatorfield = exprunaryoperatorfield;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<EXPROPERATORALTERNATIVES> cachedSchema()
    {
        return this;
    }

    // schema methods

    public EXPROPERATORALTERNATIVES newMessage()
    {
        return new EXPROPERATORALTERNATIVES();
    }

    public Class<EXPROPERATORALTERNATIVES> typeClass()
    {
        return EXPROPERATORALTERNATIVES.class;
    }

    public String messageName()
    {
        return EXPROPERATORALTERNATIVES.class.getSimpleName();
    }

    public String messageFullName()
    {
        return EXPROPERATORALTERNATIVES.class.getName();
    }

    public boolean isInitialized(EXPROPERATORALTERNATIVES message)
    {
        return true;
    }

    public void mergeFrom(Input input, EXPROPERATORALTERNATIVES message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.exprbinaryoperatorfield = input.mergeObject(message.exprbinaryoperatorfield, EXPRBINARYOPERATOR.getSchema());
                    break;

                case 2:
                    message.exprunaryoperatorfield = input.mergeObject(message.exprunaryoperatorfield, EXPRUNARYOPERATOR.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, EXPROPERATORALTERNATIVES message) throws IOException
    {
        if(message.exprbinaryoperatorfield != null)
             output.writeObject(1, message.exprbinaryoperatorfield, EXPRBINARYOPERATOR.getSchema(), false);


        if(message.exprunaryoperatorfield != null)
             output.writeObject(2, message.exprunaryoperatorfield, EXPRUNARYOPERATOR.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
