// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class EXPRUNARYOPERATOR implements Externalizable, Message<EXPRUNARYOPERATOR>, Schema<EXPRUNARYOPERATOR>
{

    public static Schema<EXPRUNARYOPERATOR> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static EXPRUNARYOPERATOR getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final EXPRUNARYOPERATOR DEFAULT_INSTANCE = new EXPRUNARYOPERATOR();

    
    private EXPRITEMALTERNATIVES operand;
    private String operator;
    private Boolean precedenceoverridden;
    private String type;

    public EXPRUNARYOPERATOR()
    {
        
    }

    public EXPRUNARYOPERATOR(
        EXPRITEMALTERNATIVES operand,
        String operator,
        String type
    )
    {
        this.operand = operand;
        this.operator = operator;
        this.type = type;
    }

    // getters and setters

    // operand

    public EXPRITEMALTERNATIVES getOperand()
    {
        return operand;
    }

    public void setOperand(EXPRITEMALTERNATIVES operand)
    {
        this.operand = operand;
    }

    // operator

    public String getOperator()
    {
        return operator;
    }

    public void setOperator(String operator)
    {
        this.operator = operator;
    }

    // precedenceoverridden

    public Boolean getPrecedenceoverridden()
    {
        return precedenceoverridden;
    }

    public void setPrecedenceoverridden(Boolean precedenceoverridden)
    {
        this.precedenceoverridden = precedenceoverridden;
    }

    // type

    public String getType()
    {
        return type;
    }

    public void setType(String type)
    {
        this.type = type;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<EXPRUNARYOPERATOR> cachedSchema()
    {
        return this;
    }

    // schema methods

    public EXPRUNARYOPERATOR newMessage()
    {
        return new EXPRUNARYOPERATOR();
    }

    public Class<EXPRUNARYOPERATOR> typeClass()
    {
        return EXPRUNARYOPERATOR.class;
    }

    public String messageName()
    {
        return EXPRUNARYOPERATOR.class.getSimpleName();
    }

    public String messageFullName()
    {
        return EXPRUNARYOPERATOR.class.getName();
    }

    public boolean isInitialized(EXPRUNARYOPERATOR message)
    {
        return 
            message.operand != null 
            && message.operator != null 
            && message.type != null;
    }

    public void mergeFrom(Input input, EXPRUNARYOPERATOR message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.operand = input.mergeObject(message.operand, EXPRITEMALTERNATIVES.getSchema());
                    break;

                case 2:
                    message.operator = input.readString();
                    break;
                case 3:
                    message.precedenceoverridden = input.readBool();
                    break;
                case 4:
                    message.type = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, EXPRUNARYOPERATOR message) throws IOException
    {
        if(message.operand == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.operand, EXPRITEMALTERNATIVES.getSchema(), false);


        if(message.operator == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.operator, false);

        if(message.precedenceoverridden != null)
            output.writeBool(3, message.precedenceoverridden, false);

        if(message.type == null)
            throw new UninitializedMessageException(message);
        output.writeString(4, message.type, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
