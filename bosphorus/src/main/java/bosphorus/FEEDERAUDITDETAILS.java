// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class FEEDERAUDITDETAILS implements Externalizable, Message<FEEDERAUDITDETAILS>, Schema<FEEDERAUDITDETAILS>
{

    public static Schema<FEEDERAUDITDETAILS> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static FEEDERAUDITDETAILS getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final FEEDERAUDITDETAILS DEFAULT_INSTANCE = new FEEDERAUDITDETAILS();

    
    private String systemid;
    private PARTYIDENTIFIED location;
    private PARTYIDENTIFIED provider;
    private PARTYPROXYALTERNATIVES subject;
    private DVDATETIME time;
    private String versionid;

    public FEEDERAUDITDETAILS()
    {
        
    }

    public FEEDERAUDITDETAILS(
        String systemid
    )
    {
        this.systemid = systemid;
    }

    // getters and setters

    // systemid

    public String getSystemid()
    {
        return systemid;
    }

    public void setSystemid(String systemid)
    {
        this.systemid = systemid;
    }

    // location

    public PARTYIDENTIFIED getLocation()
    {
        return location;
    }

    public void setLocation(PARTYIDENTIFIED location)
    {
        this.location = location;
    }

    // provider

    public PARTYIDENTIFIED getProvider()
    {
        return provider;
    }

    public void setProvider(PARTYIDENTIFIED provider)
    {
        this.provider = provider;
    }

    // subject

    public PARTYPROXYALTERNATIVES getSubject()
    {
        return subject;
    }

    public void setSubject(PARTYPROXYALTERNATIVES subject)
    {
        this.subject = subject;
    }

    // time

    public DVDATETIME getTime()
    {
        return time;
    }

    public void setTime(DVDATETIME time)
    {
        this.time = time;
    }

    // versionid

    public String getVersionid()
    {
        return versionid;
    }

    public void setVersionid(String versionid)
    {
        this.versionid = versionid;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<FEEDERAUDITDETAILS> cachedSchema()
    {
        return this;
    }

    // schema methods

    public FEEDERAUDITDETAILS newMessage()
    {
        return new FEEDERAUDITDETAILS();
    }

    public Class<FEEDERAUDITDETAILS> typeClass()
    {
        return FEEDERAUDITDETAILS.class;
    }

    public String messageName()
    {
        return FEEDERAUDITDETAILS.class.getSimpleName();
    }

    public String messageFullName()
    {
        return FEEDERAUDITDETAILS.class.getName();
    }

    public boolean isInitialized(FEEDERAUDITDETAILS message)
    {
        return 
            message.systemid != null;
    }

    public void mergeFrom(Input input, FEEDERAUDITDETAILS message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.systemid = input.readString();
                    break;
                case 2:
                    message.location = input.mergeObject(message.location, PARTYIDENTIFIED.getSchema());
                    break;

                case 3:
                    message.provider = input.mergeObject(message.provider, PARTYIDENTIFIED.getSchema());
                    break;

                case 4:
                    message.subject = input.mergeObject(message.subject, PARTYPROXYALTERNATIVES.getSchema());
                    break;

                case 5:
                    message.time = input.mergeObject(message.time, DVDATETIME.getSchema());
                    break;

                case 6:
                    message.versionid = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, FEEDERAUDITDETAILS message) throws IOException
    {
        if(message.systemid == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.systemid, false);

        if(message.location != null)
             output.writeObject(2, message.location, PARTYIDENTIFIED.getSchema(), false);


        if(message.provider != null)
             output.writeObject(3, message.provider, PARTYIDENTIFIED.getSchema(), false);


        if(message.subject != null)
             output.writeObject(4, message.subject, PARTYPROXYALTERNATIVES.getSchema(), false);


        if(message.time != null)
             output.writeObject(5, message.time, DVDATETIME.getSchema(), false);


        if(message.versionid != null)
            output.writeString(6, message.versionid, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
