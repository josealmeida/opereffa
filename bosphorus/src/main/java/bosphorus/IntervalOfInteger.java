// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class IntervalOfInteger implements Externalizable, Message<IntervalOfInteger>, Schema<IntervalOfInteger>
{

    public static Schema<IntervalOfInteger> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static IntervalOfInteger getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final IntervalOfInteger DEFAULT_INSTANCE = new IntervalOfInteger();

    
    private Integer lower;
    private Integer upper;
    private Boolean lowerincluded;
    private Boolean upperincluded;
    private Boolean lowerunbounded;
    private Boolean upperunbounded;

    public IntervalOfInteger()
    {
        
    }

    // getters and setters

    // lower

    public Integer getLower()
    {
        return lower;
    }

    public void setLower(Integer lower)
    {
        this.lower = lower;
    }

    // upper

    public Integer getUpper()
    {
        return upper;
    }

    public void setUpper(Integer upper)
    {
        this.upper = upper;
    }

    // lowerincluded

    public Boolean getLowerincluded()
    {
        return lowerincluded;
    }

    public void setLowerincluded(Boolean lowerincluded)
    {
        this.lowerincluded = lowerincluded;
    }

    // upperincluded

    public Boolean getUpperincluded()
    {
        return upperincluded;
    }

    public void setUpperincluded(Boolean upperincluded)
    {
        this.upperincluded = upperincluded;
    }

    // lowerunbounded

    public Boolean getLowerunbounded()
    {
        return lowerunbounded;
    }

    public void setLowerunbounded(Boolean lowerunbounded)
    {
        this.lowerunbounded = lowerunbounded;
    }

    // upperunbounded

    public Boolean getUpperunbounded()
    {
        return upperunbounded;
    }

    public void setUpperunbounded(Boolean upperunbounded)
    {
        this.upperunbounded = upperunbounded;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<IntervalOfInteger> cachedSchema()
    {
        return this;
    }

    // schema methods

    public IntervalOfInteger newMessage()
    {
        return new IntervalOfInteger();
    }

    public Class<IntervalOfInteger> typeClass()
    {
        return IntervalOfInteger.class;
    }

    public String messageName()
    {
        return IntervalOfInteger.class.getSimpleName();
    }

    public String messageFullName()
    {
        return IntervalOfInteger.class.getName();
    }

    public boolean isInitialized(IntervalOfInteger message)
    {
        return true;
    }

    public void mergeFrom(Input input, IntervalOfInteger message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.lower = input.readInt32();
                    break;
                case 2:
                    message.upper = input.readInt32();
                    break;
                case 3:
                    message.lowerincluded = input.readBool();
                    break;
                case 4:
                    message.upperincluded = input.readBool();
                    break;
                case 5:
                    message.lowerunbounded = input.readBool();
                    break;
                case 6:
                    message.upperunbounded = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, IntervalOfInteger message) throws IOException
    {
        if(message.lower != null)
            output.writeInt32(1, message.lower, false);

        if(message.upper != null)
            output.writeInt32(2, message.upper, false);

        if(message.lowerincluded != null)
            output.writeBool(3, message.lowerincluded, false);

        if(message.upperincluded != null)
            output.writeBool(4, message.upperincluded, false);

        if(message.lowerunbounded != null)
            output.writeBool(5, message.lowerunbounded, false);

        if(message.upperunbounded != null)
            output.writeBool(6, message.upperunbounded, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
