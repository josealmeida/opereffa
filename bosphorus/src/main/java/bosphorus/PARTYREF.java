// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class PARTYREF implements Externalizable, Message<PARTYREF>, Schema<PARTYREF>
{

    public static Schema<PARTYREF> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static PARTYREF getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final PARTYREF DEFAULT_INSTANCE = new PARTYREF();

    
    private OBJECTIDALTERNATIVES id;
    private String namespace;
    private String type;

    public PARTYREF()
    {
        
    }

    public PARTYREF(
        OBJECTIDALTERNATIVES id,
        String namespace,
        String type
    )
    {
        this.id = id;
        this.namespace = namespace;
        this.type = type;
    }

    // getters and setters

    // id

    public OBJECTIDALTERNATIVES getId()
    {
        return id;
    }

    public void setId(OBJECTIDALTERNATIVES id)
    {
        this.id = id;
    }

    // namespace

    public String getNamespace()
    {
        return namespace;
    }

    public void setNamespace(String namespace)
    {
        this.namespace = namespace;
    }

    // type

    public String getType()
    {
        return type;
    }

    public void setType(String type)
    {
        this.type = type;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<PARTYREF> cachedSchema()
    {
        return this;
    }

    // schema methods

    public PARTYREF newMessage()
    {
        return new PARTYREF();
    }

    public Class<PARTYREF> typeClass()
    {
        return PARTYREF.class;
    }

    public String messageName()
    {
        return PARTYREF.class.getSimpleName();
    }

    public String messageFullName()
    {
        return PARTYREF.class.getName();
    }

    public boolean isInitialized(PARTYREF message)
    {
        return 
            message.id != null 
            && message.namespace != null 
            && message.type != null;
    }

    public void mergeFrom(Input input, PARTYREF message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.id = input.mergeObject(message.id, OBJECTIDALTERNATIVES.getSchema());
                    break;

                case 2:
                    message.namespace = input.readString();
                    break;
                case 3:
                    message.type = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, PARTYREF message) throws IOException
    {
        if(message.id == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.id, OBJECTIDALTERNATIVES.getSchema(), false);


        if(message.namespace == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.namespace, false);

        if(message.type == null)
            throw new UninitializedMessageException(message);
        output.writeString(3, message.type, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
