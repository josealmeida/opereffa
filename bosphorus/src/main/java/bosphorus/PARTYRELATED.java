// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class PARTYRELATED implements Externalizable, Message<PARTYRELATED>, Schema<PARTYRELATED>
{

    public static Schema<PARTYRELATED> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static PARTYRELATED getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final PARTYRELATED DEFAULT_INSTANCE = new PARTYRELATED();

    
    private DVCODEDTEXT relationship;
    private PARTYREF externalref;
    private String name;
    private List<DVIDENTIFIER> identifiers;

    public PARTYRELATED()
    {
        
    }

    public PARTYRELATED(
        DVCODEDTEXT relationship
    )
    {
        this.relationship = relationship;
    }

    // getters and setters

    // relationship

    public DVCODEDTEXT getRelationship()
    {
        return relationship;
    }

    public void setRelationship(DVCODEDTEXT relationship)
    {
        this.relationship = relationship;
    }

    // externalref

    public PARTYREF getExternalref()
    {
        return externalref;
    }

    public void setExternalref(PARTYREF externalref)
    {
        this.externalref = externalref;
    }

    // name

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    // identifiers

    public List<DVIDENTIFIER> getIdentifiersList()
    {
        return identifiers;
    }

    public void setIdentifiersList(List<DVIDENTIFIER> identifiers)
    {
        this.identifiers = identifiers;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<PARTYRELATED> cachedSchema()
    {
        return this;
    }

    // schema methods

    public PARTYRELATED newMessage()
    {
        return new PARTYRELATED();
    }

    public Class<PARTYRELATED> typeClass()
    {
        return PARTYRELATED.class;
    }

    public String messageName()
    {
        return PARTYRELATED.class.getSimpleName();
    }

    public String messageFullName()
    {
        return PARTYRELATED.class.getName();
    }

    public boolean isInitialized(PARTYRELATED message)
    {
        return 
            message.relationship != null;
    }

    public void mergeFrom(Input input, PARTYRELATED message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.relationship = input.mergeObject(message.relationship, DVCODEDTEXT.getSchema());
                    break;

                case 2:
                    message.externalref = input.mergeObject(message.externalref, PARTYREF.getSchema());
                    break;

                case 3:
                    message.name = input.readString();
                    break;
                case 4:
                    if(message.identifiers == null)
                        message.identifiers = new ArrayList<DVIDENTIFIER>();
                    message.identifiers.add(input.mergeObject(null, DVIDENTIFIER.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, PARTYRELATED message) throws IOException
    {
        if(message.relationship == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.relationship, DVCODEDTEXT.getSchema(), false);


        if(message.externalref != null)
             output.writeObject(2, message.externalref, PARTYREF.getSchema(), false);


        if(message.name != null)
            output.writeString(3, message.name, false);

        if(message.identifiers != null)
        {
            for(DVIDENTIFIER identifiers : message.identifiers)
            {
                if(identifiers != null)
                    output.writeObject(4, identifiers, DVIDENTIFIER.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
