// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class PARTYSELF implements Externalizable, Message<PARTYSELF>, Schema<PARTYSELF>
{

    public static Schema<PARTYSELF> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static PARTYSELF getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final PARTYSELF DEFAULT_INSTANCE = new PARTYSELF();

    
    private PARTYREF externalref;

    public PARTYSELF()
    {
        
    }

    // getters and setters

    // externalref

    public PARTYREF getExternalref()
    {
        return externalref;
    }

    public void setExternalref(PARTYREF externalref)
    {
        this.externalref = externalref;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<PARTYSELF> cachedSchema()
    {
        return this;
    }

    // schema methods

    public PARTYSELF newMessage()
    {
        return new PARTYSELF();
    }

    public Class<PARTYSELF> typeClass()
    {
        return PARTYSELF.class;
    }

    public String messageName()
    {
        return PARTYSELF.class.getSimpleName();
    }

    public String messageFullName()
    {
        return PARTYSELF.class.getName();
    }

    public boolean isInitialized(PARTYSELF message)
    {
        return true;
    }

    public void mergeFrom(Input input, PARTYSELF message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.externalref = input.mergeObject(message.externalref, PARTYREF.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, PARTYSELF message) throws IOException
    {
        if(message.externalref != null)
             output.writeObject(1, message.externalref, PARTYREF.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
