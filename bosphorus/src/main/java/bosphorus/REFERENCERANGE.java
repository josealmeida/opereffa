// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class REFERENCERANGE implements Externalizable, Message<REFERENCERANGE>, Schema<REFERENCERANGE>
{

    public static Schema<REFERENCERANGE> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static REFERENCERANGE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final REFERENCERANGE DEFAULT_INSTANCE = new REFERENCERANGE();

    
    private DVTEXT meaning;
    private DVINTERVAL range;

    public REFERENCERANGE()
    {
        
    }

    public REFERENCERANGE(
        DVTEXT meaning,
        DVINTERVAL range
    )
    {
        this.meaning = meaning;
        this.range = range;
    }

    // getters and setters

    // meaning

    public DVTEXT getMeaning()
    {
        return meaning;
    }

    public void setMeaning(DVTEXT meaning)
    {
        this.meaning = meaning;
    }

    // range

    public DVINTERVAL getRange()
    {
        return range;
    }

    public void setRange(DVINTERVAL range)
    {
        this.range = range;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<REFERENCERANGE> cachedSchema()
    {
        return this;
    }

    // schema methods

    public REFERENCERANGE newMessage()
    {
        return new REFERENCERANGE();
    }

    public Class<REFERENCERANGE> typeClass()
    {
        return REFERENCERANGE.class;
    }

    public String messageName()
    {
        return REFERENCERANGE.class.getSimpleName();
    }

    public String messageFullName()
    {
        return REFERENCERANGE.class.getName();
    }

    public boolean isInitialized(REFERENCERANGE message)
    {
        return 
            message.meaning != null 
            && message.range != null;
    }

    public void mergeFrom(Input input, REFERENCERANGE message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.meaning = input.mergeObject(message.meaning, DVTEXT.getSchema());
                    break;

                case 2:
                    message.range = input.mergeObject(message.range, DVINTERVAL.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, REFERENCERANGE message) throws IOException
    {
        if(message.meaning == null)
            throw new UninitializedMessageException(message);
        output.writeObject(1, message.meaning, DVTEXT.getSchema(), false);


        if(message.range == null)
            throw new UninitializedMessageException(message);
        output.writeObject(2, message.range, DVINTERVAL.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
