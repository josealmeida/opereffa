// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ResponseHeader implements Externalizable, Message<ResponseHeader>, Schema<ResponseHeader>
{
    public enum Status implements com.dyuproject.protostuff.EnumLite<Status>
    {
        PB_OK(1),
        PB_ERROR(2),
        PB_WARNING(3),
        PB_INFO(4);
        
        public final int number;
        
        private Status (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static Status valueOf(int number)
        {
            switch(number) 
            {
                case 1: return PB_OK;
                case 2: return PB_ERROR;
                case 3: return PB_WARNING;
                case 4: return PB_INFO;
                default: return null;
            }
        }
    }


    public static Schema<ResponseHeader> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ResponseHeader getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ResponseHeader DEFAULT_INSTANCE = new ResponseHeader();

    static final Status DEFAULT_RESPONSESTATUS = Status.PB_OK;
    
    private Status responsestatus;
    private String content;

    public ResponseHeader()
    {
        
    }

    public ResponseHeader(
        Status responsestatus,
        String content
    )
    {
        this.responsestatus = responsestatus;
        this.content = content;
    }

    // getters and setters

    // responsestatus

    public Status getResponsestatus()
    {
        return responsestatus;
    }

    public void setResponsestatus(Status responsestatus)
    {
        this.responsestatus = responsestatus;
    }

    // content

    public String getContent()
    {
        return content;
    }

    public void setContent(String content)
    {
        this.content = content;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ResponseHeader> cachedSchema()
    {
        return this;
    }

    // schema methods

    public ResponseHeader newMessage()
    {
        return new ResponseHeader();
    }

    public Class<ResponseHeader> typeClass()
    {
        return ResponseHeader.class;
    }

    public String messageName()
    {
        return ResponseHeader.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ResponseHeader.class.getName();
    }

    public boolean isInitialized(ResponseHeader message)
    {
        return 
            message.responsestatus != null 
            && message.content != null;
    }

    public void mergeFrom(Input input, ResponseHeader message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.responsestatus = Status.valueOf(input.readEnum());
                    break;
                case 2:
                    message.content = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ResponseHeader message) throws IOException
    {
        if(message.responsestatus == null)
            throw new UninitializedMessageException(message);
        output.writeEnum(1, message.responsestatus.number, false);

        if(message.content == null)
            throw new UninitializedMessageException(message);
        output.writeString(2, message.content, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
