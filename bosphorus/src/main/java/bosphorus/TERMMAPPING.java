// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class TERMMAPPING implements Externalizable, Message<TERMMAPPING>, Schema<TERMMAPPING>
{

    public static Schema<TERMMAPPING> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static TERMMAPPING getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TERMMAPPING DEFAULT_INSTANCE = new TERMMAPPING();

    
    private String match;
    private DVCODEDTEXT purpose;
    private CODEPHRASE target;

    public TERMMAPPING()
    {
        
    }

    public TERMMAPPING(
        String match,
        CODEPHRASE target
    )
    {
        this.match = match;
        this.target = target;
    }

    // getters and setters

    // match

    public String getMatch()
    {
        return match;
    }

    public void setMatch(String match)
    {
        this.match = match;
    }

    // purpose

    public DVCODEDTEXT getPurpose()
    {
        return purpose;
    }

    public void setPurpose(DVCODEDTEXT purpose)
    {
        this.purpose = purpose;
    }

    // target

    public CODEPHRASE getTarget()
    {
        return target;
    }

    public void setTarget(CODEPHRASE target)
    {
        this.target = target;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<TERMMAPPING> cachedSchema()
    {
        return this;
    }

    // schema methods

    public TERMMAPPING newMessage()
    {
        return new TERMMAPPING();
    }

    public Class<TERMMAPPING> typeClass()
    {
        return TERMMAPPING.class;
    }

    public String messageName()
    {
        return TERMMAPPING.class.getSimpleName();
    }

    public String messageFullName()
    {
        return TERMMAPPING.class.getName();
    }

    public boolean isInitialized(TERMMAPPING message)
    {
        return 
            message.match != null 
            && message.target != null;
    }

    public void mergeFrom(Input input, TERMMAPPING message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.match = input.readString();
                    break;
                case 2:
                    message.purpose = input.mergeObject(message.purpose, DVCODEDTEXT.getSchema());
                    break;

                case 3:
                    message.target = input.mergeObject(message.target, CODEPHRASE.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, TERMMAPPING message) throws IOException
    {
        if(message.match == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.match, false);

        if(message.purpose != null)
             output.writeObject(2, message.purpose, DVCODEDTEXT.getSchema(), false);


        if(message.target == null)
            throw new UninitializedMessageException(message);
        output.writeObject(3, message.target, CODEPHRASE.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
