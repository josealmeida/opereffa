// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphorus;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class TermBindingSet implements Externalizable, Message<TermBindingSet>, Schema<TermBindingSet>
{

    public static Schema<TermBindingSet> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static TermBindingSet getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TermBindingSet DEFAULT_INSTANCE = new TermBindingSet();

    
    private List<TERMBINDINGITEM> items;
    private String terminology;

    public TermBindingSet()
    {
        
    }

    // getters and setters

    // items

    public List<TERMBINDINGITEM> getItemsList()
    {
        return items;
    }

    public void setItemsList(List<TERMBINDINGITEM> items)
    {
        this.items = items;
    }

    // terminology

    public String getTerminology()
    {
        return terminology;
    }

    public void setTerminology(String terminology)
    {
        this.terminology = terminology;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<TermBindingSet> cachedSchema()
    {
        return this;
    }

    // schema methods

    public TermBindingSet newMessage()
    {
        return new TermBindingSet();
    }

    public Class<TermBindingSet> typeClass()
    {
        return TermBindingSet.class;
    }

    public String messageName()
    {
        return TermBindingSet.class.getSimpleName();
    }

    public String messageFullName()
    {
        return TermBindingSet.class.getName();
    }

    public boolean isInitialized(TermBindingSet message)
    {
        return true;
    }

    public void mergeFrom(Input input, TermBindingSet message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    if(message.items == null)
                        message.items = new ArrayList<TERMBINDINGITEM>();
                    message.items.add(input.mergeObject(null, TERMBINDINGITEM.getSchema()));
                    break;

                case 2:
                    message.terminology = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, TermBindingSet message) throws IOException
    {
        if(message.items != null)
        {
            for(TERMBINDINGITEM items : message.items)
            {
                if(items != null)
                    output.writeObject(1, items, TERMBINDINGITEM.getSchema(), true);
            }
        }


        if(message.terminology != null)
            output.writeString(2, message.terminology, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
