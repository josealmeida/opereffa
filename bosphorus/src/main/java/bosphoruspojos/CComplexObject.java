/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphoruspojos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class CComplexObject implements Externalizable, Message<CComplexObject>
{

    public static Schema<CComplexObject> getSchema()
    {
        return SCHEMA;
    }

    public static CComplexObject getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CComplexObject DEFAULT_INSTANCE = new CComplexObject();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String assumedvalue;
    List<CSingleAttribute> singleatributes;
    List<CMultipleAttribute> multipleatributes;
    Integer isvalid;
    String path;

    public CComplexObject()
    {
        
    }

    public CComplexObject(
        String path
    )
    {
        this.path = path;
    }

    // getters and setters

    // assumedvalue

    public String getAssumedvalue()
    {
        return assumedvalue;
    }

    public void setAssumedvalue(String assumedvalue)
    {
        this.assumedvalue = assumedvalue;
    }

    // singleatributes

    public List<CSingleAttribute> getSingleatributesList()
    {
        return singleatributes;
    }

    public void setSingleatributesList(List<CSingleAttribute> singleatributes)
    {
        this.singleatributes = singleatributes;
    }

    // multipleatributes

    public List<CMultipleAttribute> getMultipleatributesList()
    {
        return multipleatributes;
    }

    public void setMultipleatributesList(List<CMultipleAttribute> multipleatributes)
    {
        this.multipleatributes = multipleatributes;
    }

    // isvalid

    public Integer getIsvalid()
    {
        return isvalid;
    }

    public void setIsvalid(Integer isvalid)
    {
        this.isvalid = isvalid;
    }

    // path

    public String getPath()
    {
        return path;
    }

    public void setPath(String path)
    {
        this.path = path;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<CComplexObject> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<CComplexObject> SCHEMA = new Schema<CComplexObject>()
    {
        // schema methods

        public CComplexObject newMessage()
        {
            return new CComplexObject();
        }

        public Class<CComplexObject> typeClass()
        {
            return CComplexObject.class;
        }

        public String messageName()
        {
            return CComplexObject.class.getSimpleName();
        }

        public String messageFullName()
        {
            return CComplexObject.class.getName();
        }

        public boolean isInitialized(CComplexObject message)
        {
            return 
                message.path != null;
        }

        public void mergeFrom(Input input, CComplexObject message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.assumedvalue = input.readString();
                        break;
                    case 2:
                        if(message.singleatributes == null)
                            message.singleatributes = new ArrayList<CSingleAttribute>();
                        message.singleatributes.add(input.mergeObject(null, CSingleAttribute.getSchema()));
                        break;

                    case 3:
                        if(message.multipleatributes == null)
                            message.multipleatributes = new ArrayList<CMultipleAttribute>();
                        message.multipleatributes.add(input.mergeObject(null, CMultipleAttribute.getSchema()));
                        break;

                    case 4:
                        message.isvalid = input.readInt32();
                        break;
                    case 5:
                        message.path = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, CComplexObject message) throws IOException
        {
            if(message.assumedvalue != null)
                output.writeString(1, message.assumedvalue, false);

            if(message.singleatributes != null)
            {
                for(CSingleAttribute singleatributes : message.singleatributes)
                {
                    if(singleatributes != null)
                        output.writeObject(2, singleatributes, CSingleAttribute.getSchema(), true);
                }
            }


            if(message.multipleatributes != null)
            {
                for(CMultipleAttribute multipleatributes : message.multipleatributes)
                {
                    if(multipleatributes != null)
                        output.writeObject(3, multipleatributes, CMultipleAttribute.getSchema(), true);
                }
            }


            if(message.isvalid != null)
                output.writeInt32(4, message.isvalid, false);

            if(message.path == null)
                throw new UninitializedMessageException(message);
            output.writeString(5, message.path, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "assumedvalue";
                case 2: return "singleatributes";
                case 3: return "multipleatributes";
                case 4: return "isvalid";
                case 5: return "path";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("assumedvalue", 1);
            fieldMap.put("singleatributes", 2);
            fieldMap.put("multipleatributes", 3);
            fieldMap.put("isvalid", 4);
            fieldMap.put("path", 5);
        }
    };
    
}
