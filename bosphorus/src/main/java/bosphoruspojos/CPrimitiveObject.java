/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphoruspojos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class CPrimitiveObject implements Externalizable, Message<CPrimitiveObject>
{
    public enum PrimitiveType implements com.dyuproject.protostuff.EnumLite<PrimitiveType>
    {
        QUANTITY(0),
        STRING(1),
        DATETIME(2);
        
        public final int number;
        
        private PrimitiveType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static PrimitiveType valueOf(int number)
        {
            switch(number) 
            {
                case 0: return QUANTITY;
                case 1: return STRING;
                case 2: return DATETIME;
                default: return null;
            }
        }
    }


    public static Schema<CPrimitiveObject> getSchema()
    {
        return SCHEMA;
    }

    public static CPrimitiveObject getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CPrimitiveObject DEFAULT_INSTANCE = new CPrimitiveObject();

    static final PrimitiveType DEFAULT_TYPE = PrimitiveType.QUANTITY;
    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    PrimitiveType type;
    String value;
    Integer isvalid;
    String path;

    public CPrimitiveObject()
    {
        
    }

    public CPrimitiveObject(
        PrimitiveType type,
        String value,
        String path
    )
    {
        this.type = type;
        this.value = value;
        this.path = path;
    }

    // getters and setters

    // type

    public PrimitiveType getType()
    {
        return type;
    }

    public void setType(PrimitiveType type)
    {
        this.type = type;
    }

    // value

    public String getValue()
    {
        return value;
    }

    public void setValue(String value)
    {
        this.value = value;
    }

    // isvalid

    public Integer getIsvalid()
    {
        return isvalid;
    }

    public void setIsvalid(Integer isvalid)
    {
        this.isvalid = isvalid;
    }

    // path

    public String getPath()
    {
        return path;
    }

    public void setPath(String path)
    {
        this.path = path;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<CPrimitiveObject> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<CPrimitiveObject> SCHEMA = new Schema<CPrimitiveObject>()
    {
        // schema methods

        public CPrimitiveObject newMessage()
        {
            return new CPrimitiveObject();
        }

        public Class<CPrimitiveObject> typeClass()
        {
            return CPrimitiveObject.class;
        }

        public String messageName()
        {
            return CPrimitiveObject.class.getSimpleName();
        }

        public String messageFullName()
        {
            return CPrimitiveObject.class.getName();
        }

        public boolean isInitialized(CPrimitiveObject message)
        {
            return 
                message.type != null 
                && message.value != null 
                && message.path != null;
        }

        public void mergeFrom(Input input, CPrimitiveObject message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.type = PrimitiveType.valueOf(input.readEnum());
                        break;
                    case 2:
                        message.value = input.readString();
                        break;
                    case 3:
                        message.isvalid = input.readInt32();
                        break;
                    case 4:
                        message.path = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, CPrimitiveObject message) throws IOException
        {
            if(message.type == null)
                throw new UninitializedMessageException(message);
            output.writeEnum(1, message.type.number, false);

            if(message.value == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.value, false);

            if(message.isvalid != null)
                output.writeInt32(3, message.isvalid, false);

            if(message.path == null)
                throw new UninitializedMessageException(message);
            output.writeString(4, message.path, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "type";
                case 2: return "value";
                case 3: return "isvalid";
                case 4: return "path";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("type", 1);
            fieldMap.put("value", 2);
            fieldMap.put("isvalid", 3);
            fieldMap.put("path", 4);
        }
    };
    
}
