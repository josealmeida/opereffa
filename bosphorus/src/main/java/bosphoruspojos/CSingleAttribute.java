/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphoruspojos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class CSingleAttribute implements Externalizable, Message<CSingleAttribute>
{

    public static Schema<CSingleAttribute> getSchema()
    {
        return SCHEMA;
    }

    public static CSingleAttribute getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CSingleAttribute DEFAULT_INSTANCE = new CSingleAttribute();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String rmattributename;
    Interval existence;
    List<CComplexObject> complexchildren;
    List<CPrimitiveObject> primitivechildren;
    List<ArchtypeInternalRef> internalrefschildren;
    List<ConstraintRef> constraintrefchildren;
    List<ArchetypeSlot> slotchildren;
    Integer isvalid;
    String path;

    public CSingleAttribute()
    {
        
    }

    public CSingleAttribute(
        String rmattributename,
        Interval existence,
        String path
    )
    {
        this.rmattributename = rmattributename;
        this.existence = existence;
        this.path = path;
    }

    // getters and setters

    // rmattributename

    public String getRmattributename()
    {
        return rmattributename;
    }

    public void setRmattributename(String rmattributename)
    {
        this.rmattributename = rmattributename;
    }

    // existence

    public Interval getExistence()
    {
        return existence;
    }

    public void setExistence(Interval existence)
    {
        this.existence = existence;
    }

    // complexchildren

    public List<CComplexObject> getComplexchildrenList()
    {
        return complexchildren;
    }

    public void setComplexchildrenList(List<CComplexObject> complexchildren)
    {
        this.complexchildren = complexchildren;
    }

    // primitivechildren

    public List<CPrimitiveObject> getPrimitivechildrenList()
    {
        return primitivechildren;
    }

    public void setPrimitivechildrenList(List<CPrimitiveObject> primitivechildren)
    {
        this.primitivechildren = primitivechildren;
    }

    // internalrefschildren

    public List<ArchtypeInternalRef> getInternalrefschildrenList()
    {
        return internalrefschildren;
    }

    public void setInternalrefschildrenList(List<ArchtypeInternalRef> internalrefschildren)
    {
        this.internalrefschildren = internalrefschildren;
    }

    // constraintrefchildren

    public List<ConstraintRef> getConstraintrefchildrenList()
    {
        return constraintrefchildren;
    }

    public void setConstraintrefchildrenList(List<ConstraintRef> constraintrefchildren)
    {
        this.constraintrefchildren = constraintrefchildren;
    }

    // slotchildren

    public List<ArchetypeSlot> getSlotchildrenList()
    {
        return slotchildren;
    }

    public void setSlotchildrenList(List<ArchetypeSlot> slotchildren)
    {
        this.slotchildren = slotchildren;
    }

    // isvalid

    public Integer getIsvalid()
    {
        return isvalid;
    }

    public void setIsvalid(Integer isvalid)
    {
        this.isvalid = isvalid;
    }

    // path

    public String getPath()
    {
        return path;
    }

    public void setPath(String path)
    {
        this.path = path;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<CSingleAttribute> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<CSingleAttribute> SCHEMA = new Schema<CSingleAttribute>()
    {
        // schema methods

        public CSingleAttribute newMessage()
        {
            return new CSingleAttribute();
        }

        public Class<CSingleAttribute> typeClass()
        {
            return CSingleAttribute.class;
        }

        public String messageName()
        {
            return CSingleAttribute.class.getSimpleName();
        }

        public String messageFullName()
        {
            return CSingleAttribute.class.getName();
        }

        public boolean isInitialized(CSingleAttribute message)
        {
            return 
                message.rmattributename != null 
                && message.existence != null 
                && message.path != null;
        }

        public void mergeFrom(Input input, CSingleAttribute message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.rmattributename = input.readString();
                        break;
                    case 2:
                        message.existence = input.mergeObject(message.existence, Interval.getSchema());
                        break;

                    case 3:
                        if(message.complexchildren == null)
                            message.complexchildren = new ArrayList<CComplexObject>();
                        message.complexchildren.add(input.mergeObject(null, CComplexObject.getSchema()));
                        break;

                    case 4:
                        if(message.primitivechildren == null)
                            message.primitivechildren = new ArrayList<CPrimitiveObject>();
                        message.primitivechildren.add(input.mergeObject(null, CPrimitiveObject.getSchema()));
                        break;

                    case 5:
                        if(message.internalrefschildren == null)
                            message.internalrefschildren = new ArrayList<ArchtypeInternalRef>();
                        message.internalrefschildren.add(input.mergeObject(null, ArchtypeInternalRef.getSchema()));
                        break;

                    case 6:
                        if(message.constraintrefchildren == null)
                            message.constraintrefchildren = new ArrayList<ConstraintRef>();
                        message.constraintrefchildren.add(input.mergeObject(null, ConstraintRef.getSchema()));
                        break;

                    case 7:
                        if(message.slotchildren == null)
                            message.slotchildren = new ArrayList<ArchetypeSlot>();
                        message.slotchildren.add(input.mergeObject(null, ArchetypeSlot.getSchema()));
                        break;

                    case 8:
                        message.isvalid = input.readInt32();
                        break;
                    case 9:
                        message.path = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, CSingleAttribute message) throws IOException
        {
            if(message.rmattributename == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.rmattributename, false);

            if(message.existence == null)
                throw new UninitializedMessageException(message);
            output.writeObject(2, message.existence, Interval.getSchema(), false);


            if(message.complexchildren != null)
            {
                for(CComplexObject complexchildren : message.complexchildren)
                {
                    if(complexchildren != null)
                        output.writeObject(3, complexchildren, CComplexObject.getSchema(), true);
                }
            }


            if(message.primitivechildren != null)
            {
                for(CPrimitiveObject primitivechildren : message.primitivechildren)
                {
                    if(primitivechildren != null)
                        output.writeObject(4, primitivechildren, CPrimitiveObject.getSchema(), true);
                }
            }


            if(message.internalrefschildren != null)
            {
                for(ArchtypeInternalRef internalrefschildren : message.internalrefschildren)
                {
                    if(internalrefschildren != null)
                        output.writeObject(5, internalrefschildren, ArchtypeInternalRef.getSchema(), true);
                }
            }


            if(message.constraintrefchildren != null)
            {
                for(ConstraintRef constraintrefchildren : message.constraintrefchildren)
                {
                    if(constraintrefchildren != null)
                        output.writeObject(6, constraintrefchildren, ConstraintRef.getSchema(), true);
                }
            }


            if(message.slotchildren != null)
            {
                for(ArchetypeSlot slotchildren : message.slotchildren)
                {
                    if(slotchildren != null)
                        output.writeObject(7, slotchildren, ArchetypeSlot.getSchema(), true);
                }
            }


            if(message.isvalid != null)
                output.writeInt32(8, message.isvalid, false);

            if(message.path == null)
                throw new UninitializedMessageException(message);
            output.writeString(9, message.path, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "rmattributename";
                case 2: return "existence";
                case 3: return "complexchildren";
                case 4: return "primitivechildren";
                case 5: return "internalrefschildren";
                case 6: return "constraintrefchildren";
                case 7: return "slotchildren";
                case 8: return "isvalid";
                case 9: return "path";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("rmattributename", 1);
            fieldMap.put("existence", 2);
            fieldMap.put("complexchildren", 3);
            fieldMap.put("primitivechildren", 4);
            fieldMap.put("internalrefschildren", 5);
            fieldMap.put("constraintrefchildren", 6);
            fieldMap.put("slotchildren", 7);
            fieldMap.put("isvalid", 8);
            fieldMap.put("path", 9);
        }
    };
    
}
