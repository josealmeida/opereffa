/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package bosphoruspojos;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Interval implements Externalizable, Message<Interval>
{

    public static Schema<Interval> getSchema()
    {
        return SCHEMA;
    }

    public static Interval getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Interval DEFAULT_INSTANCE = new Interval();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Integer lower;
    Integer upper;
    Integer lowerunbounded;
    Integer upperunbounded;
    Integer lowerincluded;
    Integer upperincluded;

    public Interval()
    {
        
    }

    public Interval(
        Integer lower,
        Integer upper
    )
    {
        this.lower = lower;
        this.upper = upper;
    }

    // getters and setters

    // lower

    public Integer getLower()
    {
        return lower;
    }

    public void setLower(Integer lower)
    {
        this.lower = lower;
    }

    // upper

    public Integer getUpper()
    {
        return upper;
    }

    public void setUpper(Integer upper)
    {
        this.upper = upper;
    }

    // lowerunbounded

    public Integer getLowerunbounded()
    {
        return lowerunbounded;
    }

    public void setLowerunbounded(Integer lowerunbounded)
    {
        this.lowerunbounded = lowerunbounded;
    }

    // upperunbounded

    public Integer getUpperunbounded()
    {
        return upperunbounded;
    }

    public void setUpperunbounded(Integer upperunbounded)
    {
        this.upperunbounded = upperunbounded;
    }

    // lowerincluded

    public Integer getLowerincluded()
    {
        return lowerincluded;
    }

    public void setLowerincluded(Integer lowerincluded)
    {
        this.lowerincluded = lowerincluded;
    }

    // upperincluded

    public Integer getUpperincluded()
    {
        return upperincluded;
    }

    public void setUpperincluded(Integer upperincluded)
    {
        this.upperincluded = upperincluded;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Interval> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<Interval> SCHEMA = new Schema<Interval>()
    {
        // schema methods

        public Interval newMessage()
        {
            return new Interval();
        }

        public Class<Interval> typeClass()
        {
            return Interval.class;
        }

        public String messageName()
        {
            return Interval.class.getSimpleName();
        }

        public String messageFullName()
        {
            return Interval.class.getName();
        }

        public boolean isInitialized(Interval message)
        {
            return 
                message.lower != null 
                && message.upper != null;
        }

        public void mergeFrom(Input input, Interval message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.lower = input.readInt32();
                        break;
                    case 2:
                        message.upper = input.readInt32();
                        break;
                    case 3:
                        message.lowerunbounded = input.readInt32();
                        break;
                    case 4:
                        message.upperunbounded = input.readInt32();
                        break;
                    case 5:
                        message.lowerincluded = input.readInt32();
                        break;
                    case 6:
                        message.upperincluded = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, Interval message) throws IOException
        {
            if(message.lower == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(1, message.lower, false);

            if(message.upper == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(2, message.upper, false);

            if(message.lowerunbounded != null)
                output.writeInt32(3, message.lowerunbounded, false);

            if(message.upperunbounded != null)
                output.writeInt32(4, message.upperunbounded, false);

            if(message.lowerincluded != null)
                output.writeInt32(5, message.lowerincluded, false);

            if(message.upperincluded != null)
                output.writeInt32(6, message.upperincluded, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "lower";
                case 2: return "upper";
                case 3: return "lowerunbounded";
                case 4: return "upperunbounded";
                case 5: return "lowerincluded";
                case 6: return "upperincluded";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("lower", 1);
            fieldMap.put("upper", 2);
            fieldMap.put("lowerunbounded", 3);
            fieldMap.put("upperunbounded", 4);
            fieldMap.put("lowerincluded", 5);
            fieldMap.put("upperincluded", 6);
        }
    };
    
}
