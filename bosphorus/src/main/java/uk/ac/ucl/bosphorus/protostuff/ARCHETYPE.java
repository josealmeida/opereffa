/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ARCHETYPE implements Externalizable, Message<ARCHETYPE>
{

    public static Schema<ARCHETYPE> getSchema()
    {
        return SCHEMA;
    }

    public static ARCHETYPE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ARCHETYPE DEFAULT_INSTANCE = new ARCHETYPE();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    HIEROBJECTID uid;
    ARCHETYPEID archetypeid;
    String adlversion;
    String concept;
    ARCHETYPEID parentarchetypeid;
    CCOMPLEXOBJECT definition;
    List<ASSERTION> invariants;
    ARCHETYPEONTOLOGY ontology;
    CODEPHRASE originallanguage;
    Boolean iscontrolled;
    RESOURCEDESCRIPTION description;
    List<TRANSLATIONDETAILS> translations;
    REVISIONHISTORY revisionhistory;

    public ARCHETYPE()
    {
        
    }

    public ARCHETYPE(
        ARCHETYPEID archetypeid,
        String concept,
        CCOMPLEXOBJECT definition,
        ARCHETYPEONTOLOGY ontology,
        CODEPHRASE originallanguage
    )
    {
        this.archetypeid = archetypeid;
        this.concept = concept;
        this.definition = definition;
        this.ontology = ontology;
        this.originallanguage = originallanguage;
    }

    // getters and setters

    // uid

    public HIEROBJECTID getUid()
    {
        return uid;
    }

    public void setUid(HIEROBJECTID uid)
    {
        this.uid = uid;
    }

    // archetypeid

    public ARCHETYPEID getArchetypeid()
    {
        return archetypeid;
    }

    public void setArchetypeid(ARCHETYPEID archetypeid)
    {
        this.archetypeid = archetypeid;
    }

    // adlversion

    public String getAdlversion()
    {
        return adlversion;
    }

    public void setAdlversion(String adlversion)
    {
        this.adlversion = adlversion;
    }

    // concept

    public String getConcept()
    {
        return concept;
    }

    public void setConcept(String concept)
    {
        this.concept = concept;
    }

    // parentarchetypeid

    public ARCHETYPEID getParentarchetypeid()
    {
        return parentarchetypeid;
    }

    public void setParentarchetypeid(ARCHETYPEID parentarchetypeid)
    {
        this.parentarchetypeid = parentarchetypeid;
    }

    // definition

    public CCOMPLEXOBJECT getDefinition()
    {
        return definition;
    }

    public void setDefinition(CCOMPLEXOBJECT definition)
    {
        this.definition = definition;
    }

    // invariants

    public List<ASSERTION> getInvariantsList()
    {
        return invariants;
    }

    public void setInvariantsList(List<ASSERTION> invariants)
    {
        this.invariants = invariants;
    }

    // ontology

    public ARCHETYPEONTOLOGY getOntology()
    {
        return ontology;
    }

    public void setOntology(ARCHETYPEONTOLOGY ontology)
    {
        this.ontology = ontology;
    }

    // originallanguage

    public CODEPHRASE getOriginallanguage()
    {
        return originallanguage;
    }

    public void setOriginallanguage(CODEPHRASE originallanguage)
    {
        this.originallanguage = originallanguage;
    }

    // iscontrolled

    public Boolean getIscontrolled()
    {
        return iscontrolled;
    }

    public void setIscontrolled(Boolean iscontrolled)
    {
        this.iscontrolled = iscontrolled;
    }

    // description

    public RESOURCEDESCRIPTION getDescription()
    {
        return description;
    }

    public void setDescription(RESOURCEDESCRIPTION description)
    {
        this.description = description;
    }

    // translations

    public List<TRANSLATIONDETAILS> getTranslationsList()
    {
        return translations;
    }

    public void setTranslationsList(List<TRANSLATIONDETAILS> translations)
    {
        this.translations = translations;
    }

    // revisionhistory

    public REVISIONHISTORY getRevisionhistory()
    {
        return revisionhistory;
    }

    public void setRevisionhistory(REVISIONHISTORY revisionhistory)
    {
        this.revisionhistory = revisionhistory;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ARCHETYPE> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<ARCHETYPE> SCHEMA = new Schema<ARCHETYPE>()
    {
        // schema methods

        public ARCHETYPE newMessage()
        {
            return new ARCHETYPE();
        }

        public Class<ARCHETYPE> typeClass()
        {
            return ARCHETYPE.class;
        }

        public String messageName()
        {
            return ARCHETYPE.class.getSimpleName();
        }

        public String messageFullName()
        {
            return ARCHETYPE.class.getName();
        }

        public boolean isInitialized(ARCHETYPE message)
        {
            return 
                message.archetypeid != null 
                && message.concept != null 
                && message.definition != null 
                && message.ontology != null 
                && message.originallanguage != null;
        }

        public void mergeFrom(Input input, ARCHETYPE message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.uid = input.mergeObject(message.uid, HIEROBJECTID.getSchema());
                        break;

                    case 2:
                        message.archetypeid = input.mergeObject(message.archetypeid, ARCHETYPEID.getSchema());
                        break;

                    case 3:
                        message.adlversion = input.readString();
                        break;
                    case 4:
                        message.concept = input.readString();
                        break;
                    case 5:
                        message.parentarchetypeid = input.mergeObject(message.parentarchetypeid, ARCHETYPEID.getSchema());
                        break;

                    case 6:
                        message.definition = input.mergeObject(message.definition, CCOMPLEXOBJECT.getSchema());
                        break;

                    case 7:
                        if(message.invariants == null)
                            message.invariants = new ArrayList<ASSERTION>();
                        message.invariants.add(input.mergeObject(null, ASSERTION.getSchema()));
                        break;

                    case 8:
                        message.ontology = input.mergeObject(message.ontology, ARCHETYPEONTOLOGY.getSchema());
                        break;

                    case 9:
                        message.originallanguage = input.mergeObject(message.originallanguage, CODEPHRASE.getSchema());
                        break;

                    case 10:
                        message.iscontrolled = input.readBool();
                        break;
                    case 11:
                        message.description = input.mergeObject(message.description, RESOURCEDESCRIPTION.getSchema());
                        break;

                    case 12:
                        if(message.translations == null)
                            message.translations = new ArrayList<TRANSLATIONDETAILS>();
                        message.translations.add(input.mergeObject(null, TRANSLATIONDETAILS.getSchema()));
                        break;

                    case 13:
                        message.revisionhistory = input.mergeObject(message.revisionhistory, REVISIONHISTORY.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, ARCHETYPE message) throws IOException
        {
            if(message.uid != null)
                 output.writeObject(1, message.uid, HIEROBJECTID.getSchema(), false);


            if(message.archetypeid == null)
                throw new UninitializedMessageException(message);
            output.writeObject(2, message.archetypeid, ARCHETYPEID.getSchema(), false);


            if(message.adlversion != null)
                output.writeString(3, message.adlversion, false);

            if(message.concept == null)
                throw new UninitializedMessageException(message);
            output.writeString(4, message.concept, false);

            if(message.parentarchetypeid != null)
                 output.writeObject(5, message.parentarchetypeid, ARCHETYPEID.getSchema(), false);


            if(message.definition == null)
                throw new UninitializedMessageException(message);
            output.writeObject(6, message.definition, CCOMPLEXOBJECT.getSchema(), false);


            if(message.invariants != null)
            {
                for(ASSERTION invariants : message.invariants)
                {
                    if(invariants != null)
                        output.writeObject(7, invariants, ASSERTION.getSchema(), true);
                }
            }


            if(message.ontology == null)
                throw new UninitializedMessageException(message);
            output.writeObject(8, message.ontology, ARCHETYPEONTOLOGY.getSchema(), false);


            if(message.originallanguage == null)
                throw new UninitializedMessageException(message);
            output.writeObject(9, message.originallanguage, CODEPHRASE.getSchema(), false);


            if(message.iscontrolled != null)
                output.writeBool(10, message.iscontrolled, false);

            if(message.description != null)
                 output.writeObject(11, message.description, RESOURCEDESCRIPTION.getSchema(), false);


            if(message.translations != null)
            {
                for(TRANSLATIONDETAILS translations : message.translations)
                {
                    if(translations != null)
                        output.writeObject(12, translations, TRANSLATIONDETAILS.getSchema(), true);
                }
            }


            if(message.revisionhistory != null)
                 output.writeObject(13, message.revisionhistory, REVISIONHISTORY.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "uid";
                case 2: return "archetypeid";
                case 3: return "adlversion";
                case 4: return "concept";
                case 5: return "parentarchetypeid";
                case 6: return "definition";
                case 7: return "invariants";
                case 8: return "ontology";
                case 9: return "originallanguage";
                case 10: return "iscontrolled";
                case 11: return "description";
                case 12: return "translations";
                case 13: return "revisionhistory";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("uid", 1);
            fieldMap.put("archetypeid", 2);
            fieldMap.put("adlversion", 3);
            fieldMap.put("concept", 4);
            fieldMap.put("parentarchetypeid", 5);
            fieldMap.put("definition", 6);
            fieldMap.put("invariants", 7);
            fieldMap.put("ontology", 8);
            fieldMap.put("originallanguage", 9);
            fieldMap.put("iscontrolled", 10);
            fieldMap.put("description", 11);
            fieldMap.put("translations", 12);
            fieldMap.put("revisionhistory", 13);
        }
    };
    
}
