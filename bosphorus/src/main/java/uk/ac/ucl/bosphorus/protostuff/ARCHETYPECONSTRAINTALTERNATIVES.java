/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ARCHETYPECONSTRAINTALTERNATIVES implements Externalizable, Message<ARCHETYPECONSTRAINTALTERNATIVES>
{

    public static Schema<ARCHETYPECONSTRAINTALTERNATIVES> getSchema()
    {
        return SCHEMA;
    }

    public static ARCHETYPECONSTRAINTALTERNATIVES getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ARCHETYPECONSTRAINTALTERNATIVES DEFAULT_INSTANCE = new ARCHETYPECONSTRAINTALTERNATIVES();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    CSINGLEATTRIBUTE csingleattributefield;
    CONSTRAINTREF constraintreffield;
    ARCHETYPESLOT archetypeslotfield;
    ARCHETYPEINTERNALREF archetypeinternalreffield;
    CDOMAINTYPE cdomaintypefield;
    CMULTIPLEATTRIBUTE cmultipleattributefield;
    CPRIMITIVEOBJECT cprimitiveobjectfield;
    CDEFINEDOBJECT cdefinedobjectfield;
    CCOMPLEXOBJECT ccomplexobjectfield;

    public ARCHETYPECONSTRAINTALTERNATIVES()
    {
        
    }

    // getters and setters

    // csingleattributefield

    public CSINGLEATTRIBUTE getCsingleattributefield()
    {
        return csingleattributefield;
    }

    public void setCsingleattributefield(CSINGLEATTRIBUTE csingleattributefield)
    {
        this.csingleattributefield = csingleattributefield;
    }

    // constraintreffield

    public CONSTRAINTREF getConstraintreffield()
    {
        return constraintreffield;
    }

    public void setConstraintreffield(CONSTRAINTREF constraintreffield)
    {
        this.constraintreffield = constraintreffield;
    }

    // archetypeslotfield

    public ARCHETYPESLOT getArchetypeslotfield()
    {
        return archetypeslotfield;
    }

    public void setArchetypeslotfield(ARCHETYPESLOT archetypeslotfield)
    {
        this.archetypeslotfield = archetypeslotfield;
    }

    // archetypeinternalreffield

    public ARCHETYPEINTERNALREF getArchetypeinternalreffield()
    {
        return archetypeinternalreffield;
    }

    public void setArchetypeinternalreffield(ARCHETYPEINTERNALREF archetypeinternalreffield)
    {
        this.archetypeinternalreffield = archetypeinternalreffield;
    }

    // cdomaintypefield

    public CDOMAINTYPE getCdomaintypefield()
    {
        return cdomaintypefield;
    }

    public void setCdomaintypefield(CDOMAINTYPE cdomaintypefield)
    {
        this.cdomaintypefield = cdomaintypefield;
    }

    // cmultipleattributefield

    public CMULTIPLEATTRIBUTE getCmultipleattributefield()
    {
        return cmultipleattributefield;
    }

    public void setCmultipleattributefield(CMULTIPLEATTRIBUTE cmultipleattributefield)
    {
        this.cmultipleattributefield = cmultipleattributefield;
    }

    // cprimitiveobjectfield

    public CPRIMITIVEOBJECT getCprimitiveobjectfield()
    {
        return cprimitiveobjectfield;
    }

    public void setCprimitiveobjectfield(CPRIMITIVEOBJECT cprimitiveobjectfield)
    {
        this.cprimitiveobjectfield = cprimitiveobjectfield;
    }

    // cdefinedobjectfield

    public CDEFINEDOBJECT getCdefinedobjectfield()
    {
        return cdefinedobjectfield;
    }

    public void setCdefinedobjectfield(CDEFINEDOBJECT cdefinedobjectfield)
    {
        this.cdefinedobjectfield = cdefinedobjectfield;
    }

    // ccomplexobjectfield

    public CCOMPLEXOBJECT getCcomplexobjectfield()
    {
        return ccomplexobjectfield;
    }

    public void setCcomplexobjectfield(CCOMPLEXOBJECT ccomplexobjectfield)
    {
        this.ccomplexobjectfield = ccomplexobjectfield;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ARCHETYPECONSTRAINTALTERNATIVES> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<ARCHETYPECONSTRAINTALTERNATIVES> SCHEMA = new Schema<ARCHETYPECONSTRAINTALTERNATIVES>()
    {
        // schema methods

        public ARCHETYPECONSTRAINTALTERNATIVES newMessage()
        {
            return new ARCHETYPECONSTRAINTALTERNATIVES();
        }

        public Class<ARCHETYPECONSTRAINTALTERNATIVES> typeClass()
        {
            return ARCHETYPECONSTRAINTALTERNATIVES.class;
        }

        public String messageName()
        {
            return ARCHETYPECONSTRAINTALTERNATIVES.class.getSimpleName();
        }

        public String messageFullName()
        {
            return ARCHETYPECONSTRAINTALTERNATIVES.class.getName();
        }

        public boolean isInitialized(ARCHETYPECONSTRAINTALTERNATIVES message)
        {
            return true;
        }

        public void mergeFrom(Input input, ARCHETYPECONSTRAINTALTERNATIVES message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.csingleattributefield = input.mergeObject(message.csingleattributefield, CSINGLEATTRIBUTE.getSchema());
                        break;

                    case 2:
                        message.constraintreffield = input.mergeObject(message.constraintreffield, CONSTRAINTREF.getSchema());
                        break;

                    case 3:
                        message.archetypeslotfield = input.mergeObject(message.archetypeslotfield, ARCHETYPESLOT.getSchema());
                        break;

                    case 4:
                        message.archetypeinternalreffield = input.mergeObject(message.archetypeinternalreffield, ARCHETYPEINTERNALREF.getSchema());
                        break;

                    case 5:
                        message.cdomaintypefield = input.mergeObject(message.cdomaintypefield, CDOMAINTYPE.getSchema());
                        break;

                    case 6:
                        message.cmultipleattributefield = input.mergeObject(message.cmultipleattributefield, CMULTIPLEATTRIBUTE.getSchema());
                        break;

                    case 7:
                        message.cprimitiveobjectfield = input.mergeObject(message.cprimitiveobjectfield, CPRIMITIVEOBJECT.getSchema());
                        break;

                    case 8:
                        message.cdefinedobjectfield = input.mergeObject(message.cdefinedobjectfield, CDEFINEDOBJECT.getSchema());
                        break;

                    case 9:
                        message.ccomplexobjectfield = input.mergeObject(message.ccomplexobjectfield, CCOMPLEXOBJECT.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, ARCHETYPECONSTRAINTALTERNATIVES message) throws IOException
        {
            if(message.csingleattributefield != null)
                 output.writeObject(1, message.csingleattributefield, CSINGLEATTRIBUTE.getSchema(), false);


            if(message.constraintreffield != null)
                 output.writeObject(2, message.constraintreffield, CONSTRAINTREF.getSchema(), false);


            if(message.archetypeslotfield != null)
                 output.writeObject(3, message.archetypeslotfield, ARCHETYPESLOT.getSchema(), false);


            if(message.archetypeinternalreffield != null)
                 output.writeObject(4, message.archetypeinternalreffield, ARCHETYPEINTERNALREF.getSchema(), false);


            if(message.cdomaintypefield != null)
                 output.writeObject(5, message.cdomaintypefield, CDOMAINTYPE.getSchema(), false);


            if(message.cmultipleattributefield != null)
                 output.writeObject(6, message.cmultipleattributefield, CMULTIPLEATTRIBUTE.getSchema(), false);


            if(message.cprimitiveobjectfield != null)
                 output.writeObject(7, message.cprimitiveobjectfield, CPRIMITIVEOBJECT.getSchema(), false);


            if(message.cdefinedobjectfield != null)
                 output.writeObject(8, message.cdefinedobjectfield, CDEFINEDOBJECT.getSchema(), false);


            if(message.ccomplexobjectfield != null)
                 output.writeObject(9, message.ccomplexobjectfield, CCOMPLEXOBJECT.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "csingleattributefield";
                case 2: return "constraintreffield";
                case 3: return "archetypeslotfield";
                case 4: return "archetypeinternalreffield";
                case 5: return "cdomaintypefield";
                case 6: return "cmultipleattributefield";
                case 7: return "cprimitiveobjectfield";
                case 8: return "cdefinedobjectfield";
                case 9: return "ccomplexobjectfield";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("csingleattributefield", 1);
            fieldMap.put("constraintreffield", 2);
            fieldMap.put("archetypeslotfield", 3);
            fieldMap.put("archetypeinternalreffield", 4);
            fieldMap.put("cdomaintypefield", 5);
            fieldMap.put("cmultipleattributefield", 6);
            fieldMap.put("cprimitiveobjectfield", 7);
            fieldMap.put("cdefinedobjectfield", 8);
            fieldMap.put("ccomplexobjectfield", 9);
        }
    };
    
}
