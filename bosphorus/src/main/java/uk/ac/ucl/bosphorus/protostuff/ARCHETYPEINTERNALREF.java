/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ARCHETYPEINTERNALREF implements Externalizable, Message<ARCHETYPEINTERNALREF>
{

    public static Schema<ARCHETYPEINTERNALREF> getSchema()
    {
        return SCHEMA;
    }

    public static ARCHETYPEINTERNALREF getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ARCHETYPEINTERNALREF DEFAULT_INSTANCE = new ARCHETYPEINTERNALREF();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String targetpath;
    String rmtypename;
    IntervalOfInteger occurrences;
    String nodeid;

    public ARCHETYPEINTERNALREF()
    {
        
    }

    public ARCHETYPEINTERNALREF(
        String targetpath,
        String rmtypename,
        IntervalOfInteger occurrences,
        String nodeid
    )
    {
        this.targetpath = targetpath;
        this.rmtypename = rmtypename;
        this.occurrences = occurrences;
        this.nodeid = nodeid;
    }

    // getters and setters

    // targetpath

    public String getTargetpath()
    {
        return targetpath;
    }

    public void setTargetpath(String targetpath)
    {
        this.targetpath = targetpath;
    }

    // rmtypename

    public String getRmtypename()
    {
        return rmtypename;
    }

    public void setRmtypename(String rmtypename)
    {
        this.rmtypename = rmtypename;
    }

    // occurrences

    public IntervalOfInteger getOccurrences()
    {
        return occurrences;
    }

    public void setOccurrences(IntervalOfInteger occurrences)
    {
        this.occurrences = occurrences;
    }

    // nodeid

    public String getNodeid()
    {
        return nodeid;
    }

    public void setNodeid(String nodeid)
    {
        this.nodeid = nodeid;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ARCHETYPEINTERNALREF> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<ARCHETYPEINTERNALREF> SCHEMA = new Schema<ARCHETYPEINTERNALREF>()
    {
        // schema methods

        public ARCHETYPEINTERNALREF newMessage()
        {
            return new ARCHETYPEINTERNALREF();
        }

        public Class<ARCHETYPEINTERNALREF> typeClass()
        {
            return ARCHETYPEINTERNALREF.class;
        }

        public String messageName()
        {
            return ARCHETYPEINTERNALREF.class.getSimpleName();
        }

        public String messageFullName()
        {
            return ARCHETYPEINTERNALREF.class.getName();
        }

        public boolean isInitialized(ARCHETYPEINTERNALREF message)
        {
            return 
                message.targetpath != null 
                && message.rmtypename != null 
                && message.occurrences != null 
                && message.nodeid != null;
        }

        public void mergeFrom(Input input, ARCHETYPEINTERNALREF message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.targetpath = input.readString();
                        break;
                    case 2:
                        message.rmtypename = input.readString();
                        break;
                    case 3:
                        message.occurrences = input.mergeObject(message.occurrences, IntervalOfInteger.getSchema());
                        break;

                    case 4:
                        message.nodeid = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, ARCHETYPEINTERNALREF message) throws IOException
        {
            if(message.targetpath == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.targetpath, false);

            if(message.rmtypename == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.rmtypename, false);

            if(message.occurrences == null)
                throw new UninitializedMessageException(message);
            output.writeObject(3, message.occurrences, IntervalOfInteger.getSchema(), false);


            if(message.nodeid == null)
                throw new UninitializedMessageException(message);
            output.writeString(4, message.nodeid, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "targetpath";
                case 2: return "rmtypename";
                case 3: return "occurrences";
                case 4: return "nodeid";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("targetpath", 1);
            fieldMap.put("rmtypename", 2);
            fieldMap.put("occurrences", 3);
            fieldMap.put("nodeid", 4);
        }
    };
    
}
