/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ASSERTION implements Externalizable, Message<ASSERTION>
{

    public static Schema<ASSERTION> getSchema()
    {
        return SCHEMA;
    }

    public static ASSERTION getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ASSERTION DEFAULT_INSTANCE = new ASSERTION();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String tag;
    String stringexpression;
    EXPRITEMALTERNATIVES expression;
    List<ASSERTIONVARIABLE> variables;

    public ASSERTION()
    {
        
    }

    public ASSERTION(
        EXPRITEMALTERNATIVES expression
    )
    {
        this.expression = expression;
    }

    // getters and setters

    // tag

    public String getTag()
    {
        return tag;
    }

    public void setTag(String tag)
    {
        this.tag = tag;
    }

    // stringexpression

    public String getStringexpression()
    {
        return stringexpression;
    }

    public void setStringexpression(String stringexpression)
    {
        this.stringexpression = stringexpression;
    }

    // expression

    public EXPRITEMALTERNATIVES getExpression()
    {
        return expression;
    }

    public void setExpression(EXPRITEMALTERNATIVES expression)
    {
        this.expression = expression;
    }

    // variables

    public List<ASSERTIONVARIABLE> getVariablesList()
    {
        return variables;
    }

    public void setVariablesList(List<ASSERTIONVARIABLE> variables)
    {
        this.variables = variables;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ASSERTION> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<ASSERTION> SCHEMA = new Schema<ASSERTION>()
    {
        // schema methods

        public ASSERTION newMessage()
        {
            return new ASSERTION();
        }

        public Class<ASSERTION> typeClass()
        {
            return ASSERTION.class;
        }

        public String messageName()
        {
            return ASSERTION.class.getSimpleName();
        }

        public String messageFullName()
        {
            return ASSERTION.class.getName();
        }

        public boolean isInitialized(ASSERTION message)
        {
            return 
                message.expression != null;
        }

        public void mergeFrom(Input input, ASSERTION message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.tag = input.readString();
                        break;
                    case 2:
                        message.stringexpression = input.readString();
                        break;
                    case 3:
                        message.expression = input.mergeObject(message.expression, EXPRITEMALTERNATIVES.getSchema());
                        break;

                    case 4:
                        if(message.variables == null)
                            message.variables = new ArrayList<ASSERTIONVARIABLE>();
                        message.variables.add(input.mergeObject(null, ASSERTIONVARIABLE.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, ASSERTION message) throws IOException
        {
            if(message.tag != null)
                output.writeString(1, message.tag, false);

            if(message.stringexpression != null)
                output.writeString(2, message.stringexpression, false);

            if(message.expression == null)
                throw new UninitializedMessageException(message);
            output.writeObject(3, message.expression, EXPRITEMALTERNATIVES.getSchema(), false);


            if(message.variables != null)
            {
                for(ASSERTIONVARIABLE variables : message.variables)
                {
                    if(variables != null)
                        output.writeObject(4, variables, ASSERTIONVARIABLE.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "tag";
                case 2: return "stringexpression";
                case 3: return "expression";
                case 4: return "variables";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("tag", 1);
            fieldMap.put("stringexpression", 2);
            fieldMap.put("expression", 3);
            fieldMap.put("variables", 4);
        }
    };
    
}
