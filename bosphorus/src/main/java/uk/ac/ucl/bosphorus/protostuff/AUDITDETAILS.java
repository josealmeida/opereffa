/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class AUDITDETAILS implements Externalizable, Message<AUDITDETAILS>
{

    public static Schema<AUDITDETAILS> getSchema()
    {
        return SCHEMA;
    }

    public static AUDITDETAILS getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final AUDITDETAILS DEFAULT_INSTANCE = new AUDITDETAILS();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String systemid;
    PARTYPROXYALTERNATIVES committer;
    DVDATETIME timecommitted;
    DVCODEDTEXT changetype;
    DVTEXT description;

    public AUDITDETAILS()
    {
        
    }

    public AUDITDETAILS(
        String systemid,
        PARTYPROXYALTERNATIVES committer,
        DVDATETIME timecommitted,
        DVCODEDTEXT changetype
    )
    {
        this.systemid = systemid;
        this.committer = committer;
        this.timecommitted = timecommitted;
        this.changetype = changetype;
    }

    // getters and setters

    // systemid

    public String getSystemid()
    {
        return systemid;
    }

    public void setSystemid(String systemid)
    {
        this.systemid = systemid;
    }

    // committer

    public PARTYPROXYALTERNATIVES getCommitter()
    {
        return committer;
    }

    public void setCommitter(PARTYPROXYALTERNATIVES committer)
    {
        this.committer = committer;
    }

    // timecommitted

    public DVDATETIME getTimecommitted()
    {
        return timecommitted;
    }

    public void setTimecommitted(DVDATETIME timecommitted)
    {
        this.timecommitted = timecommitted;
    }

    // changetype

    public DVCODEDTEXT getChangetype()
    {
        return changetype;
    }

    public void setChangetype(DVCODEDTEXT changetype)
    {
        this.changetype = changetype;
    }

    // description

    public DVTEXT getDescription()
    {
        return description;
    }

    public void setDescription(DVTEXT description)
    {
        this.description = description;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<AUDITDETAILS> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<AUDITDETAILS> SCHEMA = new Schema<AUDITDETAILS>()
    {
        // schema methods

        public AUDITDETAILS newMessage()
        {
            return new AUDITDETAILS();
        }

        public Class<AUDITDETAILS> typeClass()
        {
            return AUDITDETAILS.class;
        }

        public String messageName()
        {
            return AUDITDETAILS.class.getSimpleName();
        }

        public String messageFullName()
        {
            return AUDITDETAILS.class.getName();
        }

        public boolean isInitialized(AUDITDETAILS message)
        {
            return 
                message.systemid != null 
                && message.committer != null 
                && message.timecommitted != null 
                && message.changetype != null;
        }

        public void mergeFrom(Input input, AUDITDETAILS message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.systemid = input.readString();
                        break;
                    case 2:
                        message.committer = input.mergeObject(message.committer, PARTYPROXYALTERNATIVES.getSchema());
                        break;

                    case 3:
                        message.timecommitted = input.mergeObject(message.timecommitted, DVDATETIME.getSchema());
                        break;

                    case 4:
                        message.changetype = input.mergeObject(message.changetype, DVCODEDTEXT.getSchema());
                        break;

                    case 5:
                        message.description = input.mergeObject(message.description, DVTEXT.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, AUDITDETAILS message) throws IOException
        {
            if(message.systemid == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.systemid, false);

            if(message.committer == null)
                throw new UninitializedMessageException(message);
            output.writeObject(2, message.committer, PARTYPROXYALTERNATIVES.getSchema(), false);


            if(message.timecommitted == null)
                throw new UninitializedMessageException(message);
            output.writeObject(3, message.timecommitted, DVDATETIME.getSchema(), false);


            if(message.changetype == null)
                throw new UninitializedMessageException(message);
            output.writeObject(4, message.changetype, DVCODEDTEXT.getSchema(), false);


            if(message.description != null)
                 output.writeObject(5, message.description, DVTEXT.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "systemid";
                case 2: return "committer";
                case 3: return "timecommitted";
                case 4: return "changetype";
                case 5: return "description";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("systemid", 1);
            fieldMap.put("committer", 2);
            fieldMap.put("timecommitted", 3);
            fieldMap.put("changetype", 4);
            fieldMap.put("description", 5);
        }
    };
    
}
