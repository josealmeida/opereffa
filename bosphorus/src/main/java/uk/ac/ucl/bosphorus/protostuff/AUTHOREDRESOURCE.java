/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class AUTHOREDRESOURCE implements Externalizable, Message<AUTHOREDRESOURCE>
{

    public static Schema<AUTHOREDRESOURCE> getSchema()
    {
        return SCHEMA;
    }

    public static AUTHOREDRESOURCE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final AUTHOREDRESOURCE DEFAULT_INSTANCE = new AUTHOREDRESOURCE();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    CODEPHRASE originallanguage;
    Boolean iscontrolled;
    RESOURCEDESCRIPTION description;
    List<TRANSLATIONDETAILS> translations;
    REVISIONHISTORY revisionhistory;

    public AUTHOREDRESOURCE()
    {
        
    }

    public AUTHOREDRESOURCE(
        CODEPHRASE originallanguage
    )
    {
        this.originallanguage = originallanguage;
    }

    // getters and setters

    // originallanguage

    public CODEPHRASE getOriginallanguage()
    {
        return originallanguage;
    }

    public void setOriginallanguage(CODEPHRASE originallanguage)
    {
        this.originallanguage = originallanguage;
    }

    // iscontrolled

    public Boolean getIscontrolled()
    {
        return iscontrolled;
    }

    public void setIscontrolled(Boolean iscontrolled)
    {
        this.iscontrolled = iscontrolled;
    }

    // description

    public RESOURCEDESCRIPTION getDescription()
    {
        return description;
    }

    public void setDescription(RESOURCEDESCRIPTION description)
    {
        this.description = description;
    }

    // translations

    public List<TRANSLATIONDETAILS> getTranslationsList()
    {
        return translations;
    }

    public void setTranslationsList(List<TRANSLATIONDETAILS> translations)
    {
        this.translations = translations;
    }

    // revisionhistory

    public REVISIONHISTORY getRevisionhistory()
    {
        return revisionhistory;
    }

    public void setRevisionhistory(REVISIONHISTORY revisionhistory)
    {
        this.revisionhistory = revisionhistory;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<AUTHOREDRESOURCE> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<AUTHOREDRESOURCE> SCHEMA = new Schema<AUTHOREDRESOURCE>()
    {
        // schema methods

        public AUTHOREDRESOURCE newMessage()
        {
            return new AUTHOREDRESOURCE();
        }

        public Class<AUTHOREDRESOURCE> typeClass()
        {
            return AUTHOREDRESOURCE.class;
        }

        public String messageName()
        {
            return AUTHOREDRESOURCE.class.getSimpleName();
        }

        public String messageFullName()
        {
            return AUTHOREDRESOURCE.class.getName();
        }

        public boolean isInitialized(AUTHOREDRESOURCE message)
        {
            return 
                message.originallanguage != null;
        }

        public void mergeFrom(Input input, AUTHOREDRESOURCE message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.originallanguage = input.mergeObject(message.originallanguage, CODEPHRASE.getSchema());
                        break;

                    case 2:
                        message.iscontrolled = input.readBool();
                        break;
                    case 3:
                        message.description = input.mergeObject(message.description, RESOURCEDESCRIPTION.getSchema());
                        break;

                    case 4:
                        if(message.translations == null)
                            message.translations = new ArrayList<TRANSLATIONDETAILS>();
                        message.translations.add(input.mergeObject(null, TRANSLATIONDETAILS.getSchema()));
                        break;

                    case 5:
                        message.revisionhistory = input.mergeObject(message.revisionhistory, REVISIONHISTORY.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, AUTHOREDRESOURCE message) throws IOException
        {
            if(message.originallanguage == null)
                throw new UninitializedMessageException(message);
            output.writeObject(1, message.originallanguage, CODEPHRASE.getSchema(), false);


            if(message.iscontrolled != null)
                output.writeBool(2, message.iscontrolled, false);

            if(message.description != null)
                 output.writeObject(3, message.description, RESOURCEDESCRIPTION.getSchema(), false);


            if(message.translations != null)
            {
                for(TRANSLATIONDETAILS translations : message.translations)
                {
                    if(translations != null)
                        output.writeObject(4, translations, TRANSLATIONDETAILS.getSchema(), true);
                }
            }


            if(message.revisionhistory != null)
                 output.writeObject(5, message.revisionhistory, REVISIONHISTORY.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "originallanguage";
                case 2: return "iscontrolled";
                case 3: return "description";
                case 4: return "translations";
                case 5: return "revisionhistory";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("originallanguage", 1);
            fieldMap.put("iscontrolled", 2);
            fieldMap.put("description", 3);
            fieldMap.put("translations", 4);
            fieldMap.put("revisionhistory", 5);
        }
    };
    
}
