/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class CDATE implements Externalizable, Message<CDATE>
{

    public static Schema<CDATE> getSchema()
    {
        return SCHEMA;
    }

    public static CDATE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CDATE DEFAULT_INSTANCE = new CDATE();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String pattern;
    String timezonevalidity;
    IntervalOfDate range;
    String assumedvalue;

    public CDATE()
    {
        
    }

    // getters and setters

    // pattern

    public String getPattern()
    {
        return pattern;
    }

    public void setPattern(String pattern)
    {
        this.pattern = pattern;
    }

    // timezonevalidity

    public String getTimezonevalidity()
    {
        return timezonevalidity;
    }

    public void setTimezonevalidity(String timezonevalidity)
    {
        this.timezonevalidity = timezonevalidity;
    }

    // range

    public IntervalOfDate getRange()
    {
        return range;
    }

    public void setRange(IntervalOfDate range)
    {
        this.range = range;
    }

    // assumedvalue

    public String getAssumedvalue()
    {
        return assumedvalue;
    }

    public void setAssumedvalue(String assumedvalue)
    {
        this.assumedvalue = assumedvalue;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<CDATE> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<CDATE> SCHEMA = new Schema<CDATE>()
    {
        // schema methods

        public CDATE newMessage()
        {
            return new CDATE();
        }

        public Class<CDATE> typeClass()
        {
            return CDATE.class;
        }

        public String messageName()
        {
            return CDATE.class.getSimpleName();
        }

        public String messageFullName()
        {
            return CDATE.class.getName();
        }

        public boolean isInitialized(CDATE message)
        {
            return true;
        }

        public void mergeFrom(Input input, CDATE message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.pattern = input.readString();
                        break;
                    case 2:
                        message.timezonevalidity = input.readString();
                        break;
                    case 3:
                        message.range = input.mergeObject(message.range, IntervalOfDate.getSchema());
                        break;

                    case 4:
                        message.assumedvalue = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, CDATE message) throws IOException
        {
            if(message.pattern != null)
                output.writeString(1, message.pattern, false);

            if(message.timezonevalidity != null)
                output.writeString(2, message.timezonevalidity, false);

            if(message.range != null)
                 output.writeObject(3, message.range, IntervalOfDate.getSchema(), false);


            if(message.assumedvalue != null)
                output.writeString(4, message.assumedvalue, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "pattern";
                case 2: return "timezonevalidity";
                case 3: return "range";
                case 4: return "assumedvalue";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("pattern", 1);
            fieldMap.put("timezonevalidity", 2);
            fieldMap.put("range", 3);
            fieldMap.put("assumedvalue", 4);
        }
    };
    
}
