/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class CPRIMITIVEALTERNATIVES implements Externalizable, Message<CPRIMITIVEALTERNATIVES>
{

    public static Schema<CPRIMITIVEALTERNATIVES> getSchema()
    {
        return SCHEMA;
    }

    public static CPRIMITIVEALTERNATIVES getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final CPRIMITIVEALTERNATIVES DEFAULT_INSTANCE = new CPRIMITIVEALTERNATIVES();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    CINTEGER cintegerfield;
    CTIME ctimefield;
    CDATE cdatefield;
    CSTRING cstringfield;
    CREAL crealfield;
    CBOOLEAN cbooleanfield;
    CDURATION cdurationfield;
    CDATETIME cdatetimefield;

    public CPRIMITIVEALTERNATIVES()
    {
        
    }

    // getters and setters

    // cintegerfield

    public CINTEGER getCintegerfield()
    {
        return cintegerfield;
    }

    public void setCintegerfield(CINTEGER cintegerfield)
    {
        this.cintegerfield = cintegerfield;
    }

    // ctimefield

    public CTIME getCtimefield()
    {
        return ctimefield;
    }

    public void setCtimefield(CTIME ctimefield)
    {
        this.ctimefield = ctimefield;
    }

    // cdatefield

    public CDATE getCdatefield()
    {
        return cdatefield;
    }

    public void setCdatefield(CDATE cdatefield)
    {
        this.cdatefield = cdatefield;
    }

    // cstringfield

    public CSTRING getCstringfield()
    {
        return cstringfield;
    }

    public void setCstringfield(CSTRING cstringfield)
    {
        this.cstringfield = cstringfield;
    }

    // crealfield

    public CREAL getCrealfield()
    {
        return crealfield;
    }

    public void setCrealfield(CREAL crealfield)
    {
        this.crealfield = crealfield;
    }

    // cbooleanfield

    public CBOOLEAN getCbooleanfield()
    {
        return cbooleanfield;
    }

    public void setCbooleanfield(CBOOLEAN cbooleanfield)
    {
        this.cbooleanfield = cbooleanfield;
    }

    // cdurationfield

    public CDURATION getCdurationfield()
    {
        return cdurationfield;
    }

    public void setCdurationfield(CDURATION cdurationfield)
    {
        this.cdurationfield = cdurationfield;
    }

    // cdatetimefield

    public CDATETIME getCdatetimefield()
    {
        return cdatetimefield;
    }

    public void setCdatetimefield(CDATETIME cdatetimefield)
    {
        this.cdatetimefield = cdatetimefield;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<CPRIMITIVEALTERNATIVES> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<CPRIMITIVEALTERNATIVES> SCHEMA = new Schema<CPRIMITIVEALTERNATIVES>()
    {
        // schema methods

        public CPRIMITIVEALTERNATIVES newMessage()
        {
            return new CPRIMITIVEALTERNATIVES();
        }

        public Class<CPRIMITIVEALTERNATIVES> typeClass()
        {
            return CPRIMITIVEALTERNATIVES.class;
        }

        public String messageName()
        {
            return CPRIMITIVEALTERNATIVES.class.getSimpleName();
        }

        public String messageFullName()
        {
            return CPRIMITIVEALTERNATIVES.class.getName();
        }

        public boolean isInitialized(CPRIMITIVEALTERNATIVES message)
        {
            return true;
        }

        public void mergeFrom(Input input, CPRIMITIVEALTERNATIVES message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.cintegerfield = input.mergeObject(message.cintegerfield, CINTEGER.getSchema());
                        break;

                    case 2:
                        message.ctimefield = input.mergeObject(message.ctimefield, CTIME.getSchema());
                        break;

                    case 3:
                        message.cdatefield = input.mergeObject(message.cdatefield, CDATE.getSchema());
                        break;

                    case 4:
                        message.cstringfield = input.mergeObject(message.cstringfield, CSTRING.getSchema());
                        break;

                    case 5:
                        message.crealfield = input.mergeObject(message.crealfield, CREAL.getSchema());
                        break;

                    case 6:
                        message.cbooleanfield = input.mergeObject(message.cbooleanfield, CBOOLEAN.getSchema());
                        break;

                    case 7:
                        message.cdurationfield = input.mergeObject(message.cdurationfield, CDURATION.getSchema());
                        break;

                    case 8:
                        message.cdatetimefield = input.mergeObject(message.cdatetimefield, CDATETIME.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, CPRIMITIVEALTERNATIVES message) throws IOException
        {
            if(message.cintegerfield != null)
                 output.writeObject(1, message.cintegerfield, CINTEGER.getSchema(), false);


            if(message.ctimefield != null)
                 output.writeObject(2, message.ctimefield, CTIME.getSchema(), false);


            if(message.cdatefield != null)
                 output.writeObject(3, message.cdatefield, CDATE.getSchema(), false);


            if(message.cstringfield != null)
                 output.writeObject(4, message.cstringfield, CSTRING.getSchema(), false);


            if(message.crealfield != null)
                 output.writeObject(5, message.crealfield, CREAL.getSchema(), false);


            if(message.cbooleanfield != null)
                 output.writeObject(6, message.cbooleanfield, CBOOLEAN.getSchema(), false);


            if(message.cdurationfield != null)
                 output.writeObject(7, message.cdurationfield, CDURATION.getSchema(), false);


            if(message.cdatetimefield != null)
                 output.writeObject(8, message.cdatetimefield, CDATETIME.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "cintegerfield";
                case 2: return "ctimefield";
                case 3: return "cdatefield";
                case 4: return "cstringfield";
                case 5: return "crealfield";
                case 6: return "cbooleanfield";
                case 7: return "cdurationfield";
                case 8: return "cdatetimefield";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("cintegerfield", 1);
            fieldMap.put("ctimefield", 2);
            fieldMap.put("cdatefield", 3);
            fieldMap.put("cstringfield", 4);
            fieldMap.put("crealfield", 5);
            fieldMap.put("cbooleanfield", 6);
            fieldMap.put("cdurationfield", 7);
            fieldMap.put("cdatetimefield", 8);
        }
    };
    
}
