/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class DVPARSABLE implements Externalizable, Message<DVPARSABLE>
{

    public static Schema<DVPARSABLE> getSchema()
    {
        return SCHEMA;
    }

    public static DVPARSABLE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DVPARSABLE DEFAULT_INSTANCE = new DVPARSABLE();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String value;
    String formalism;
    CODEPHRASE charset;
    CODEPHRASE language;

    public DVPARSABLE()
    {
        
    }

    public DVPARSABLE(
        String value,
        String formalism
    )
    {
        this.value = value;
        this.formalism = formalism;
    }

    // getters and setters

    // value

    public String getValue()
    {
        return value;
    }

    public void setValue(String value)
    {
        this.value = value;
    }

    // formalism

    public String getFormalism()
    {
        return formalism;
    }

    public void setFormalism(String formalism)
    {
        this.formalism = formalism;
    }

    // charset

    public CODEPHRASE getCharset()
    {
        return charset;
    }

    public void setCharset(CODEPHRASE charset)
    {
        this.charset = charset;
    }

    // language

    public CODEPHRASE getLanguage()
    {
        return language;
    }

    public void setLanguage(CODEPHRASE language)
    {
        this.language = language;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DVPARSABLE> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DVPARSABLE> SCHEMA = new Schema<DVPARSABLE>()
    {
        // schema methods

        public DVPARSABLE newMessage()
        {
            return new DVPARSABLE();
        }

        public Class<DVPARSABLE> typeClass()
        {
            return DVPARSABLE.class;
        }

        public String messageName()
        {
            return DVPARSABLE.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DVPARSABLE.class.getName();
        }

        public boolean isInitialized(DVPARSABLE message)
        {
            return 
                message.value != null 
                && message.formalism != null;
        }

        public void mergeFrom(Input input, DVPARSABLE message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.value = input.readString();
                        break;
                    case 2:
                        message.formalism = input.readString();
                        break;
                    case 3:
                        message.charset = input.mergeObject(message.charset, CODEPHRASE.getSchema());
                        break;

                    case 4:
                        message.language = input.mergeObject(message.language, CODEPHRASE.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DVPARSABLE message) throws IOException
        {
            if(message.value == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.value, false);

            if(message.formalism == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.formalism, false);

            if(message.charset != null)
                 output.writeObject(3, message.charset, CODEPHRASE.getSchema(), false);


            if(message.language != null)
                 output.writeObject(4, message.language, CODEPHRASE.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "value";
                case 2: return "formalism";
                case 3: return "charset";
                case 4: return "language";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("value", 1);
            fieldMap.put("formalism", 2);
            fieldMap.put("charset", 3);
            fieldMap.put("language", 4);
        }
    };
    
}
