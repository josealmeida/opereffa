/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class DVSTATE implements Externalizable, Message<DVSTATE>
{

    public static Schema<DVSTATE> getSchema()
    {
        return SCHEMA;
    }

    public static DVSTATE getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DVSTATE DEFAULT_INSTANCE = new DVSTATE();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    DVCODEDTEXT value;
    Boolean isterminal;

    public DVSTATE()
    {
        
    }

    public DVSTATE(
        DVCODEDTEXT value
    )
    {
        this.value = value;
    }

    // getters and setters

    // value

    public DVCODEDTEXT getValue()
    {
        return value;
    }

    public void setValue(DVCODEDTEXT value)
    {
        this.value = value;
    }

    // isterminal

    public Boolean getIsterminal()
    {
        return isterminal;
    }

    public void setIsterminal(Boolean isterminal)
    {
        this.isterminal = isterminal;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DVSTATE> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DVSTATE> SCHEMA = new Schema<DVSTATE>()
    {
        // schema methods

        public DVSTATE newMessage()
        {
            return new DVSTATE();
        }

        public Class<DVSTATE> typeClass()
        {
            return DVSTATE.class;
        }

        public String messageName()
        {
            return DVSTATE.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DVSTATE.class.getName();
        }

        public boolean isInitialized(DVSTATE message)
        {
            return 
                message.value != null;
        }

        public void mergeFrom(Input input, DVSTATE message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.value = input.mergeObject(message.value, DVCODEDTEXT.getSchema());
                        break;

                    case 2:
                        message.isterminal = input.readBool();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DVSTATE message) throws IOException
        {
            if(message.value == null)
                throw new UninitializedMessageException(message);
            output.writeObject(1, message.value, DVCODEDTEXT.getSchema(), false);


            if(message.isterminal != null)
                output.writeBool(2, message.isterminal, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "value";
                case 2: return "isterminal";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("value", 1);
            fieldMap.put("isterminal", 2);
        }
    };
    
}
