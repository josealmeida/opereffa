/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class DVTIME implements Externalizable, Message<DVTIME>
{

    public static Schema<DVTIME> getSchema()
    {
        return SCHEMA;
    }

    public static DVTIME getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final DVTIME DEFAULT_INSTANCE = new DVTIME();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String value;
    DVINTERVAL normalrange;
    List<REFERENCERANGE> otherreferenceranges;
    CODEPHRASE normalstatus;
    String magnitudestatus;
    DVDURATION accuracy;

    public DVTIME()
    {
        
    }

    public DVTIME(
        String value
    )
    {
        this.value = value;
    }

    // getters and setters

    // value

    public String getValue()
    {
        return value;
    }

    public void setValue(String value)
    {
        this.value = value;
    }

    // normalrange

    public DVINTERVAL getNormalrange()
    {
        return normalrange;
    }

    public void setNormalrange(DVINTERVAL normalrange)
    {
        this.normalrange = normalrange;
    }

    // otherreferenceranges

    public List<REFERENCERANGE> getOtherreferencerangesList()
    {
        return otherreferenceranges;
    }

    public void setOtherreferencerangesList(List<REFERENCERANGE> otherreferenceranges)
    {
        this.otherreferenceranges = otherreferenceranges;
    }

    // normalstatus

    public CODEPHRASE getNormalstatus()
    {
        return normalstatus;
    }

    public void setNormalstatus(CODEPHRASE normalstatus)
    {
        this.normalstatus = normalstatus;
    }

    // magnitudestatus

    public String getMagnitudestatus()
    {
        return magnitudestatus;
    }

    public void setMagnitudestatus(String magnitudestatus)
    {
        this.magnitudestatus = magnitudestatus;
    }

    // accuracy

    public DVDURATION getAccuracy()
    {
        return accuracy;
    }

    public void setAccuracy(DVDURATION accuracy)
    {
        this.accuracy = accuracy;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<DVTIME> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<DVTIME> SCHEMA = new Schema<DVTIME>()
    {
        // schema methods

        public DVTIME newMessage()
        {
            return new DVTIME();
        }

        public Class<DVTIME> typeClass()
        {
            return DVTIME.class;
        }

        public String messageName()
        {
            return DVTIME.class.getSimpleName();
        }

        public String messageFullName()
        {
            return DVTIME.class.getName();
        }

        public boolean isInitialized(DVTIME message)
        {
            return 
                message.value != null;
        }

        public void mergeFrom(Input input, DVTIME message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.value = input.readString();
                        break;
                    case 2:
                        message.normalrange = input.mergeObject(message.normalrange, DVINTERVAL.getSchema());
                        break;

                    case 3:
                        if(message.otherreferenceranges == null)
                            message.otherreferenceranges = new ArrayList<REFERENCERANGE>();
                        message.otherreferenceranges.add(input.mergeObject(null, REFERENCERANGE.getSchema()));
                        break;

                    case 4:
                        message.normalstatus = input.mergeObject(message.normalstatus, CODEPHRASE.getSchema());
                        break;

                    case 5:
                        message.magnitudestatus = input.readString();
                        break;
                    case 6:
                        message.accuracy = input.mergeObject(message.accuracy, DVDURATION.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, DVTIME message) throws IOException
        {
            if(message.value == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.value, false);

            if(message.normalrange != null)
                 output.writeObject(2, message.normalrange, DVINTERVAL.getSchema(), false);


            if(message.otherreferenceranges != null)
            {
                for(REFERENCERANGE otherreferenceranges : message.otherreferenceranges)
                {
                    if(otherreferenceranges != null)
                        output.writeObject(3, otherreferenceranges, REFERENCERANGE.getSchema(), true);
                }
            }


            if(message.normalstatus != null)
                 output.writeObject(4, message.normalstatus, CODEPHRASE.getSchema(), false);


            if(message.magnitudestatus != null)
                output.writeString(5, message.magnitudestatus, false);

            if(message.accuracy != null)
                 output.writeObject(6, message.accuracy, DVDURATION.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "value";
                case 2: return "normalrange";
                case 3: return "otherreferenceranges";
                case 4: return "normalstatus";
                case 5: return "magnitudestatus";
                case 6: return "accuracy";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("value", 1);
            fieldMap.put("normalrange", 2);
            fieldMap.put("otherreferenceranges", 3);
            fieldMap.put("normalstatus", 4);
            fieldMap.put("magnitudestatus", 5);
            fieldMap.put("accuracy", 6);
        }
    };
    
}
