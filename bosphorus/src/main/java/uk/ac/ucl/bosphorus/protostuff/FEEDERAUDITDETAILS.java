/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class FEEDERAUDITDETAILS implements Externalizable, Message<FEEDERAUDITDETAILS>
{

    public static Schema<FEEDERAUDITDETAILS> getSchema()
    {
        return SCHEMA;
    }

    public static FEEDERAUDITDETAILS getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final FEEDERAUDITDETAILS DEFAULT_INSTANCE = new FEEDERAUDITDETAILS();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String systemid;
    PARTYIDENTIFIED location;
    PARTYIDENTIFIED provider;
    PARTYPROXYALTERNATIVES subject;
    DVDATETIME time;
    String versionid;

    public FEEDERAUDITDETAILS()
    {
        
    }

    public FEEDERAUDITDETAILS(
        String systemid
    )
    {
        this.systemid = systemid;
    }

    // getters and setters

    // systemid

    public String getSystemid()
    {
        return systemid;
    }

    public void setSystemid(String systemid)
    {
        this.systemid = systemid;
    }

    // location

    public PARTYIDENTIFIED getLocation()
    {
        return location;
    }

    public void setLocation(PARTYIDENTIFIED location)
    {
        this.location = location;
    }

    // provider

    public PARTYIDENTIFIED getProvider()
    {
        return provider;
    }

    public void setProvider(PARTYIDENTIFIED provider)
    {
        this.provider = provider;
    }

    // subject

    public PARTYPROXYALTERNATIVES getSubject()
    {
        return subject;
    }

    public void setSubject(PARTYPROXYALTERNATIVES subject)
    {
        this.subject = subject;
    }

    // time

    public DVDATETIME getTime()
    {
        return time;
    }

    public void setTime(DVDATETIME time)
    {
        this.time = time;
    }

    // versionid

    public String getVersionid()
    {
        return versionid;
    }

    public void setVersionid(String versionid)
    {
        this.versionid = versionid;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<FEEDERAUDITDETAILS> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<FEEDERAUDITDETAILS> SCHEMA = new Schema<FEEDERAUDITDETAILS>()
    {
        // schema methods

        public FEEDERAUDITDETAILS newMessage()
        {
            return new FEEDERAUDITDETAILS();
        }

        public Class<FEEDERAUDITDETAILS> typeClass()
        {
            return FEEDERAUDITDETAILS.class;
        }

        public String messageName()
        {
            return FEEDERAUDITDETAILS.class.getSimpleName();
        }

        public String messageFullName()
        {
            return FEEDERAUDITDETAILS.class.getName();
        }

        public boolean isInitialized(FEEDERAUDITDETAILS message)
        {
            return 
                message.systemid != null;
        }

        public void mergeFrom(Input input, FEEDERAUDITDETAILS message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.systemid = input.readString();
                        break;
                    case 2:
                        message.location = input.mergeObject(message.location, PARTYIDENTIFIED.getSchema());
                        break;

                    case 3:
                        message.provider = input.mergeObject(message.provider, PARTYIDENTIFIED.getSchema());
                        break;

                    case 4:
                        message.subject = input.mergeObject(message.subject, PARTYPROXYALTERNATIVES.getSchema());
                        break;

                    case 5:
                        message.time = input.mergeObject(message.time, DVDATETIME.getSchema());
                        break;

                    case 6:
                        message.versionid = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, FEEDERAUDITDETAILS message) throws IOException
        {
            if(message.systemid == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.systemid, false);

            if(message.location != null)
                 output.writeObject(2, message.location, PARTYIDENTIFIED.getSchema(), false);


            if(message.provider != null)
                 output.writeObject(3, message.provider, PARTYIDENTIFIED.getSchema(), false);


            if(message.subject != null)
                 output.writeObject(4, message.subject, PARTYPROXYALTERNATIVES.getSchema(), false);


            if(message.time != null)
                 output.writeObject(5, message.time, DVDATETIME.getSchema(), false);


            if(message.versionid != null)
                output.writeString(6, message.versionid, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "systemid";
                case 2: return "location";
                case 3: return "provider";
                case 4: return "subject";
                case 5: return "time";
                case 6: return "versionid";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("systemid", 1);
            fieldMap.put("location", 2);
            fieldMap.put("provider", 3);
            fieldMap.put("subject", 4);
            fieldMap.put("time", 5);
            fieldMap.put("versionid", 6);
        }
    };
    
}
