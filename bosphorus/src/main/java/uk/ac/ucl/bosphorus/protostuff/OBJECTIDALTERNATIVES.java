/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class OBJECTIDALTERNATIVES implements Externalizable, Message<OBJECTIDALTERNATIVES>
{

    public static Schema<OBJECTIDALTERNATIVES> getSchema()
    {
        return SCHEMA;
    }

    public static OBJECTIDALTERNATIVES getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final OBJECTIDALTERNATIVES DEFAULT_INSTANCE = new OBJECTIDALTERNATIVES();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    GENERICID genericidfield;
    ARCHETYPEID archetypeidfield;
    HIEROBJECTID hierobjectidfield;
    TEMPLATEID templateidfield;
    TERMINOLOGYID terminologyidfield;
    OBJECTVERSIONID objectversionidfield;
    UIDBASEDID uidbasedidfield;

    public OBJECTIDALTERNATIVES()
    {
        
    }

    // getters and setters

    // genericidfield

    public GENERICID getGenericidfield()
    {
        return genericidfield;
    }

    public void setGenericidfield(GENERICID genericidfield)
    {
        this.genericidfield = genericidfield;
    }

    // archetypeidfield

    public ARCHETYPEID getArchetypeidfield()
    {
        return archetypeidfield;
    }

    public void setArchetypeidfield(ARCHETYPEID archetypeidfield)
    {
        this.archetypeidfield = archetypeidfield;
    }

    // hierobjectidfield

    public HIEROBJECTID getHierobjectidfield()
    {
        return hierobjectidfield;
    }

    public void setHierobjectidfield(HIEROBJECTID hierobjectidfield)
    {
        this.hierobjectidfield = hierobjectidfield;
    }

    // templateidfield

    public TEMPLATEID getTemplateidfield()
    {
        return templateidfield;
    }

    public void setTemplateidfield(TEMPLATEID templateidfield)
    {
        this.templateidfield = templateidfield;
    }

    // terminologyidfield

    public TERMINOLOGYID getTerminologyidfield()
    {
        return terminologyidfield;
    }

    public void setTerminologyidfield(TERMINOLOGYID terminologyidfield)
    {
        this.terminologyidfield = terminologyidfield;
    }

    // objectversionidfield

    public OBJECTVERSIONID getObjectversionidfield()
    {
        return objectversionidfield;
    }

    public void setObjectversionidfield(OBJECTVERSIONID objectversionidfield)
    {
        this.objectversionidfield = objectversionidfield;
    }

    // uidbasedidfield

    public UIDBASEDID getUidbasedidfield()
    {
        return uidbasedidfield;
    }

    public void setUidbasedidfield(UIDBASEDID uidbasedidfield)
    {
        this.uidbasedidfield = uidbasedidfield;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<OBJECTIDALTERNATIVES> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<OBJECTIDALTERNATIVES> SCHEMA = new Schema<OBJECTIDALTERNATIVES>()
    {
        // schema methods

        public OBJECTIDALTERNATIVES newMessage()
        {
            return new OBJECTIDALTERNATIVES();
        }

        public Class<OBJECTIDALTERNATIVES> typeClass()
        {
            return OBJECTIDALTERNATIVES.class;
        }

        public String messageName()
        {
            return OBJECTIDALTERNATIVES.class.getSimpleName();
        }

        public String messageFullName()
        {
            return OBJECTIDALTERNATIVES.class.getName();
        }

        public boolean isInitialized(OBJECTIDALTERNATIVES message)
        {
            return true;
        }

        public void mergeFrom(Input input, OBJECTIDALTERNATIVES message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.genericidfield = input.mergeObject(message.genericidfield, GENERICID.getSchema());
                        break;

                    case 2:
                        message.archetypeidfield = input.mergeObject(message.archetypeidfield, ARCHETYPEID.getSchema());
                        break;

                    case 3:
                        message.hierobjectidfield = input.mergeObject(message.hierobjectidfield, HIEROBJECTID.getSchema());
                        break;

                    case 4:
                        message.templateidfield = input.mergeObject(message.templateidfield, TEMPLATEID.getSchema());
                        break;

                    case 5:
                        message.terminologyidfield = input.mergeObject(message.terminologyidfield, TERMINOLOGYID.getSchema());
                        break;

                    case 6:
                        message.objectversionidfield = input.mergeObject(message.objectversionidfield, OBJECTVERSIONID.getSchema());
                        break;

                    case 7:
                        message.uidbasedidfield = input.mergeObject(message.uidbasedidfield, UIDBASEDID.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, OBJECTIDALTERNATIVES message) throws IOException
        {
            if(message.genericidfield != null)
                 output.writeObject(1, message.genericidfield, GENERICID.getSchema(), false);


            if(message.archetypeidfield != null)
                 output.writeObject(2, message.archetypeidfield, ARCHETYPEID.getSchema(), false);


            if(message.hierobjectidfield != null)
                 output.writeObject(3, message.hierobjectidfield, HIEROBJECTID.getSchema(), false);


            if(message.templateidfield != null)
                 output.writeObject(4, message.templateidfield, TEMPLATEID.getSchema(), false);


            if(message.terminologyidfield != null)
                 output.writeObject(5, message.terminologyidfield, TERMINOLOGYID.getSchema(), false);


            if(message.objectversionidfield != null)
                 output.writeObject(6, message.objectversionidfield, OBJECTVERSIONID.getSchema(), false);


            if(message.uidbasedidfield != null)
                 output.writeObject(7, message.uidbasedidfield, UIDBASEDID.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "genericidfield";
                case 2: return "archetypeidfield";
                case 3: return "hierobjectidfield";
                case 4: return "templateidfield";
                case 5: return "terminologyidfield";
                case 6: return "objectversionidfield";
                case 7: return "uidbasedidfield";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("genericidfield", 1);
            fieldMap.put("archetypeidfield", 2);
            fieldMap.put("hierobjectidfield", 3);
            fieldMap.put("templateidfield", 4);
            fieldMap.put("terminologyidfield", 5);
            fieldMap.put("objectversionidfield", 6);
            fieldMap.put("uidbasedidfield", 7);
        }
    };
    
}
