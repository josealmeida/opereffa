/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class PARTICIPATION implements Externalizable, Message<PARTICIPATION>
{

    public static Schema<PARTICIPATION> getSchema()
    {
        return SCHEMA;
    }

    public static PARTICIPATION getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final PARTICIPATION DEFAULT_INSTANCE = new PARTICIPATION();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    DVTEXT function;
    PARTYPROXYALTERNATIVES performer;
    DVINTERVAL time;
    DVCODEDTEXT mode;

    public PARTICIPATION()
    {
        
    }

    public PARTICIPATION(
        DVTEXT function,
        PARTYPROXYALTERNATIVES performer,
        DVCODEDTEXT mode
    )
    {
        this.function = function;
        this.performer = performer;
        this.mode = mode;
    }

    // getters and setters

    // function

    public DVTEXT getFunction()
    {
        return function;
    }

    public void setFunction(DVTEXT function)
    {
        this.function = function;
    }

    // performer

    public PARTYPROXYALTERNATIVES getPerformer()
    {
        return performer;
    }

    public void setPerformer(PARTYPROXYALTERNATIVES performer)
    {
        this.performer = performer;
    }

    // time

    public DVINTERVAL getTime()
    {
        return time;
    }

    public void setTime(DVINTERVAL time)
    {
        this.time = time;
    }

    // mode

    public DVCODEDTEXT getMode()
    {
        return mode;
    }

    public void setMode(DVCODEDTEXT mode)
    {
        this.mode = mode;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<PARTICIPATION> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<PARTICIPATION> SCHEMA = new Schema<PARTICIPATION>()
    {
        // schema methods

        public PARTICIPATION newMessage()
        {
            return new PARTICIPATION();
        }

        public Class<PARTICIPATION> typeClass()
        {
            return PARTICIPATION.class;
        }

        public String messageName()
        {
            return PARTICIPATION.class.getSimpleName();
        }

        public String messageFullName()
        {
            return PARTICIPATION.class.getName();
        }

        public boolean isInitialized(PARTICIPATION message)
        {
            return 
                message.function != null 
                && message.performer != null 
                && message.mode != null;
        }

        public void mergeFrom(Input input, PARTICIPATION message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.function = input.mergeObject(message.function, DVTEXT.getSchema());
                        break;

                    case 2:
                        message.performer = input.mergeObject(message.performer, PARTYPROXYALTERNATIVES.getSchema());
                        break;

                    case 3:
                        message.time = input.mergeObject(message.time, DVINTERVAL.getSchema());
                        break;

                    case 4:
                        message.mode = input.mergeObject(message.mode, DVCODEDTEXT.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, PARTICIPATION message) throws IOException
        {
            if(message.function == null)
                throw new UninitializedMessageException(message);
            output.writeObject(1, message.function, DVTEXT.getSchema(), false);


            if(message.performer == null)
                throw new UninitializedMessageException(message);
            output.writeObject(2, message.performer, PARTYPROXYALTERNATIVES.getSchema(), false);


            if(message.time != null)
                 output.writeObject(3, message.time, DVINTERVAL.getSchema(), false);


            if(message.mode == null)
                throw new UninitializedMessageException(message);
            output.writeObject(4, message.mode, DVCODEDTEXT.getSchema(), false);

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "function";
                case 2: return "performer";
                case 3: return "time";
                case 4: return "mode";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("function", 1);
            fieldMap.put("performer", 2);
            fieldMap.put("time", 3);
            fieldMap.put("mode", 4);
        }
    };
    
}
