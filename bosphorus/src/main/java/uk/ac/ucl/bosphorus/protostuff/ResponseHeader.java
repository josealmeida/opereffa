/*******************************************************************************
 * Copyright 2012 Sevket Seref Arikan, David Ingram
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from aom.proto

package uk.ac.ucl.bosphorus.protostuff;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ResponseHeader implements Externalizable, Message<ResponseHeader>
{
    public enum Status implements com.dyuproject.protostuff.EnumLite<Status>
    {
        PB_OK(1),
        PB_ERROR(2),
        PB_WARNING(3),
        PB_INFO(4);
        
        public final int number;
        
        private Status (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static Status valueOf(int number)
        {
            switch(number) 
            {
                case 1: return PB_OK;
                case 2: return PB_ERROR;
                case 3: return PB_WARNING;
                case 4: return PB_INFO;
                default: return null;
            }
        }
    }


    public static Schema<ResponseHeader> getSchema()
    {
        return SCHEMA;
    }

    public static ResponseHeader getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ResponseHeader DEFAULT_INSTANCE = new ResponseHeader();

    static final Status DEFAULT_RESPONSESTATUS = Status.PB_OK;
    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Status responsestatus;
    String content;

    public ResponseHeader()
    {
        
    }

    public ResponseHeader(
        Status responsestatus,
        String content
    )
    {
        this.responsestatus = responsestatus;
        this.content = content;
    }

    // getters and setters

    // responsestatus

    public Status getResponsestatus()
    {
        return responsestatus;
    }

    public void setResponsestatus(Status responsestatus)
    {
        this.responsestatus = responsestatus;
    }

    // content

    public String getContent()
    {
        return content;
    }

    public void setContent(String content)
    {
        this.content = content;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ResponseHeader> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<ResponseHeader> SCHEMA = new Schema<ResponseHeader>()
    {
        // schema methods

        public ResponseHeader newMessage()
        {
            return new ResponseHeader();
        }

        public Class<ResponseHeader> typeClass()
        {
            return ResponseHeader.class;
        }

        public String messageName()
        {
            return ResponseHeader.class.getSimpleName();
        }

        public String messageFullName()
        {
            return ResponseHeader.class.getName();
        }

        public boolean isInitialized(ResponseHeader message)
        {
            return 
                message.responsestatus != null 
                && message.content != null;
        }

        public void mergeFrom(Input input, ResponseHeader message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.responsestatus = Status.valueOf(input.readEnum());
                        break;
                    case 2:
                        message.content = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, ResponseHeader message) throws IOException
        {
            if(message.responsestatus == null)
                throw new UninitializedMessageException(message);
            output.writeEnum(1, message.responsestatus.number, false);

            if(message.content == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.content, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "responsestatus";
                case 2: return "content";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("responsestatus", 1);
            fieldMap.put("content", 2);
        }
    };
    
}
